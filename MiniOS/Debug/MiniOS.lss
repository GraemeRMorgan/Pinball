
MiniOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000143c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040143c  0040143c  0001143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  00401444  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  2000043c  00401880  0002043c  2**2
                  ALLOC
  4 .stack        00003000  20000510  00401954  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   000102fb  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000264d  00000000  00000000  000307ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000038f1  00000000  00000000  00032e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000858  00000000  00000000  000366f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007c8  00000000  00000000  00036f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006460  00000000  00000000  00037718  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000adcc  00000000  00000000  0003db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055211  00000000  00000000  00048944  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000134c  00000000  00000000  0009db58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 35 00 20 d5 0c 40 00 d3 0c 40 00 d3 0c 40 00     .5. ..@...@...@.
  400010:	d3 0c 40 00 d3 0c 40 00 d3 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d3 0c 40 00 d3 0c 40 00 00 00 00 00 d3 0c 40 00     ..@...@.......@.
  40003c:	45 01 40 00 d3 0c 40 00 d3 0c 40 00 d3 0c 40 00     E.@...@...@...@.
  40004c:	d3 0c 40 00 d3 0c 40 00 d3 0c 40 00 d3 0c 40 00     ..@...@...@...@.
  40005c:	d3 0c 40 00 d3 0c 40 00 e5 02 40 00 00 00 00 00     ..@...@...@.....
  40006c:	c9 08 40 00 dd 08 40 00 f1 08 40 00 d3 0c 40 00     ..@...@...@...@.
  40007c:	d3 0c 40 00 00 00 00 00 00 00 00 00 d3 0c 40 00     ..@...........@.
  40008c:	d3 0c 40 00 d3 0c 40 00 d3 0c 40 00 d3 0c 40 00     ..@...@...@...@.
  40009c:	d3 0c 40 00 d3 0c 40 00 d3 0c 40 00 d3 0c 40 00     ..@...@...@...@.
  4000ac:	d3 0c 40 00 d3 0c 40 00 d3 0c 40 00 d3 0c 40 00     ..@...@...@...@.
  4000bc:	d3 0c 40 00 d3 0c 40 00 d3 0c 40 00 d3 0c 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00401444 	.word	0x00401444

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00401444 	.word	0x00401444
  40012c:	20000440 	.word	0x20000440
  400130:	00401444 	.word	0x00401444
  400134:	00000000 	.word	0x00000000

00400138 <hal_cpu_init>:
*
*	Initializes the CPU. This function must be called before 
*	HAL IO Init. That is: hal_cpu_init(); hal_io_init(); 
*
*/
void hal_cpu_init(void){	
  400138:	b508      	push	{r3, lr}
	sysclk_init();  //initialize clocks
  40013a:	4b01      	ldr	r3, [pc, #4]	; (400140 <hal_cpu_init+0x8>)
  40013c:	4798      	blx	r3
  40013e:	bd08      	pop	{r3, pc}
  400140:	00400405 	.word	0x00400405

00400144 <SysTick_Handler>:
	//...
}

//The actual handler
//(careful with the capital T in SysTick)
void SysTick_Handler(void){
  400144:	4770      	bx	lr
	...

00400148 <hal_delay>:
*
*	Busy-waiting delay
*
*	@param delay_in_ms delay in milliseconds
*/
void hal_delay(uint32_t delay_in_ms){
  400148:	b538      	push	{r3, r4, r5, lr}
	delay_ms(delay_in_ms);
  40014a:	b918      	cbnz	r0, 400154 <hal_delay+0xc>
  40014c:	2009      	movs	r0, #9
  40014e:	4b0a      	ldr	r3, [pc, #40]	; (400178 <hal_delay+0x30>)
  400150:	4798      	blx	r3
  400152:	bd38      	pop	{r3, r4, r5, pc}
  400154:	4601      	mov	r1, r0
  400156:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40015a:	2300      	movs	r3, #0
  40015c:	f243 64af 	movw	r4, #13999	; 0x36af
  400160:	2500      	movs	r5, #0
  400162:	4806      	ldr	r0, [pc, #24]	; (40017c <hal_delay+0x34>)
  400164:	fbe0 4501 	umlal	r4, r5, r0, r1
  400168:	4620      	mov	r0, r4
  40016a:	4629      	mov	r1, r5
  40016c:	4c04      	ldr	r4, [pc, #16]	; (400180 <hal_delay+0x38>)
  40016e:	47a0      	blx	r4
  400170:	4b01      	ldr	r3, [pc, #4]	; (400178 <hal_delay+0x30>)
  400172:	4798      	blx	r3
  400174:	bd38      	pop	{r3, r4, r5, pc}
  400176:	bf00      	nop
  400178:	20000001 	.word	0x20000001
  40017c:	07270e00 	.word	0x07270e00
  400180:	00400f7d 	.word	0x00400f7d

00400184 <hal_io_init>:
*
*	Initializes the board and IO pins. This function must be called before
*	any other call to an IO device. Example: hal_io_init(); hal_mtimer_start();...
*
*/
void hal_io_init(void){
  400184:	b510      	push	{r4, lr}
	board_init();		//initialize board pins
  400186:	4b05      	ldr	r3, [pc, #20]	; (40019c <hal_io_init+0x18>)
  400188:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40018a:	200b      	movs	r0, #11
  40018c:	4c04      	ldr	r4, [pc, #16]	; (4001a0 <hal_io_init+0x1c>)
  40018e:	47a0      	blx	r4
  400190:	200c      	movs	r0, #12
  400192:	47a0      	blx	r4
  400194:	200d      	movs	r0, #13
  400196:	47a0      	blx	r4
  400198:	bd10      	pop	{r4, pc}
  40019a:	bf00      	nop
  40019c:	00400469 	.word	0x00400469
  4001a0:	00400a31 	.word	0x00400a31

004001a4 <hal_led_start>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001a4:	4b0f      	ldr	r3, [pc, #60]	; (4001e4 <hal_led_start+0x40>)
  4001a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001aa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4001b4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  4001be:	f5a2 32f9 	sub.w	r2, r2, #127488	; 0x1f200
  4001c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4001c6:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001c8:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4001d0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4001da:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4001e0:	4770      	bx	lr
  4001e2:	bf00      	nop
  4001e4:	400e1200 	.word	0x400e1200

004001e8 <hal_led_write>:
*	@param state on or off
*/
void hal_led_write( tLedNum  lednum, tLedState state ){
	uint32_t IOLine = 0;
	
	switch(lednum){
  4001e8:	2804      	cmp	r0, #4
  4001ea:	d81b      	bhi.n	400224 <hal_led_write+0x3c>
  4001ec:	e8df f000 	tbb	[pc, r0]
  4001f0:	16141203 	.word	0x16141203
  4001f4:	18          	.byte	0x18
  4001f5:	00          	.byte	0x00
		case Led0: IOLine = IOPORT_CREATE_PIN(PIOC, 23); break;
  4001f6:	2257      	movs	r2, #87	; 0x57
	return pin >> 5;
  4001f8:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4001fe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400202:	025b      	lsls	r3, r3, #9
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  400204:	b181      	cbz	r1, 400228 <hal_led_write+0x40>
	return 1U << (pin & 0x1F);
  400206:	f002 021f 	and.w	r2, r2, #31
  40020a:	2101      	movs	r1, #1
  40020c:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400210:	635a      	str	r2, [r3, #52]	; 0x34
  400212:	4770      	bx	lr
		case Led1: IOLine = IOPORT_CREATE_PIN(PIOC, 20); break;
  400214:	2254      	movs	r2, #84	; 0x54
  400216:	e7ef      	b.n	4001f8 <hal_led_write+0x10>
		case Led2: IOLine = IOPORT_CREATE_PIN(PIOA, 16); break;
  400218:	2210      	movs	r2, #16
  40021a:	e7ed      	b.n	4001f8 <hal_led_write+0x10>
		case Led3: IOLine = IOPORT_CREATE_PIN(PIOC, 22); break;
  40021c:	2256      	movs	r2, #86	; 0x56
  40021e:	e7eb      	b.n	4001f8 <hal_led_write+0x10>
		case Led4: IOLine = IOPORT_CREATE_PIN(PIOC, 19); break;
  400220:	2253      	movs	r2, #83	; 0x53
  400222:	e7e9      	b.n	4001f8 <hal_led_write+0x10>
	uint32_t IOLine = 0;
  400224:	2200      	movs	r2, #0
  400226:	e7e7      	b.n	4001f8 <hal_led_write+0x10>
	return 1U << (pin & 0x1F);
  400228:	f002 021f 	and.w	r2, r2, #31
  40022c:	2101      	movs	r1, #1
  40022e:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400232:	631a      	str	r2, [r3, #48]	; 0x30
  400234:	4770      	bx	lr
	...

00400238 <hal_clock_start>:
*	Clock Start
*
*	Starts and initializes the system clock's time
*
*/
void hal_clock_start( void ){
  400238:	b510      	push	{r4, lr}
	rtc_setup();
}

void rtc_setup(){
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40023a:	2000      	movs	r0, #0
  40023c:	4b05      	ldr	r3, [pc, #20]	; (400254 <hal_clock_start+0x1c>)
  40023e:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  400240:	4c05      	ldr	r4, [pc, #20]	; (400258 <hal_clock_start+0x20>)
  400242:	47a0      	blx	r4
  400244:	2800      	cmp	r0, #0
  400246:	d0fc      	beq.n	400242 <hal_clock_start+0xa>
	rtc_set_hour_mode(RTC, 0); //24-hrs mode by default
  400248:	2100      	movs	r1, #0
  40024a:	4804      	ldr	r0, [pc, #16]	; (40025c <hal_clock_start+0x24>)
  40024c:	4b04      	ldr	r3, [pc, #16]	; (400260 <hal_clock_start+0x28>)
  40024e:	4798      	blx	r3
  400250:	bd10      	pop	{r4, pc}
  400252:	bf00      	nop
  400254:	00400969 	.word	0x00400969
  400258:	0040098d 	.word	0x0040098d
  40025c:	400e1460 	.word	0x400e1460
  400260:	00400a85 	.word	0x00400a85

00400264 <hal_clock_write>:
*
*	Write the system clock's time
*
*	@param t a pointer to a tTime structure specifying the time
*/
void hal_clock_write( tTime* t ){
  400264:	b570      	push	{r4, r5, r6, lr}
  400266:	b082      	sub	sp, #8
  400268:	4604      	mov	r4, r0
	rtc_set_date( RTC, t->year, t->month, t->day, 0 );
  40026a:	4d08      	ldr	r5, [pc, #32]	; (40028c <hal_clock_write+0x28>)
  40026c:	2300      	movs	r3, #0
  40026e:	9300      	str	r3, [sp, #0]
  400270:	68c3      	ldr	r3, [r0, #12]
  400272:	6902      	ldr	r2, [r0, #16]
  400274:	6941      	ldr	r1, [r0, #20]
  400276:	4628      	mov	r0, r5
  400278:	4e05      	ldr	r6, [pc, #20]	; (400290 <hal_clock_write+0x2c>)
  40027a:	47b0      	blx	r6
	rtc_set_time( RTC, t->hours, t->minutes, t->seconds );
  40027c:	6823      	ldr	r3, [r4, #0]
  40027e:	6862      	ldr	r2, [r4, #4]
  400280:	68a1      	ldr	r1, [r4, #8]
  400282:	4628      	mov	r0, r5
  400284:	4c03      	ldr	r4, [pc, #12]	; (400294 <hal_clock_write+0x30>)
  400286:	47a0      	blx	r4
}
  400288:	b002      	add	sp, #8
  40028a:	bd70      	pop	{r4, r5, r6, pc}
  40028c:	400e1460 	.word	0x400e1460
  400290:	00400bfd 	.word	0x00400bfd
  400294:	00400af5 	.word	0x00400af5

00400298 <hal_clock_read>:
*
*	Reads the system's clock time
*
*	@param t a pointer to a tTime structure 
*/
void hal_clock_read( tTime* t ){
  400298:	b5f0      	push	{r4, r5, r6, r7, lr}
  40029a:	b085      	sub	sp, #20
  40029c:	4604      	mov	r4, r0
	uint32_t dummy_week = 0;
  40029e:	ad04      	add	r5, sp, #16
  4002a0:	2300      	movs	r3, #0
  4002a2:	f845 3d04 	str.w	r3, [r5, #-4]!
	
	rtc_get_time(RTC, &(t->hours), &(t->minutes), &(t->seconds));
  4002a6:	4e0a      	ldr	r6, [pc, #40]	; (4002d0 <hal_clock_read+0x38>)
  4002a8:	4603      	mov	r3, r0
  4002aa:	1d02      	adds	r2, r0, #4
  4002ac:	f100 0108 	add.w	r1, r0, #8
  4002b0:	4630      	mov	r0, r6
  4002b2:	4f08      	ldr	r7, [pc, #32]	; (4002d4 <hal_clock_read+0x3c>)
  4002b4:	47b8      	blx	r7
	rtc_get_date(RTC, &(t->year), &(t->month), &(t->day), &dummy_week);
  4002b6:	9500      	str	r5, [sp, #0]
  4002b8:	f104 030c 	add.w	r3, r4, #12
  4002bc:	f104 0210 	add.w	r2, r4, #16
  4002c0:	f104 0114 	add.w	r1, r4, #20
  4002c4:	4630      	mov	r0, r6
  4002c6:	4c04      	ldr	r4, [pc, #16]	; (4002d8 <hal_clock_read+0x40>)
  4002c8:	47a0      	blx	r4
}
  4002ca:	b005      	add	sp, #20
  4002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4002ce:	bf00      	nop
  4002d0:	400e1460 	.word	0x400e1460
  4002d4:	00400a9b 	.word	0x00400a9b
  4002d8:	00400b89 	.word	0x00400b89

004002dc <hal_display_putc>:
*
*	Writes a character to the display
*
*	@param character the character to be printed
*/
void hal_display_putc( uint8_t character ){
  4002dc:	4770      	bx	lr

004002de <hal_display_cls>:
*
*	Clears the Display (like the old MS-DOS cls)
*
*	@param string the formatted output
*/
void hal_display_cls(void){
  4002de:	4770      	bx	lr

004002e0 <hal_display_gotoxy>:
*	Sets the cursor in a given coordinate. (Like Borland's gotoxy)
*
*	@param x x coordinate
*	@param y y coordinate
*/
void hal_display_gotoxy( uint32_t x, uint32_t y ){
  4002e0:	4770      	bx	lr
	...

004002e4 <UART1_Handler>:
	uart_read( UART1, buf );							//read
}


//UART1 ISR
void UART1_Handler(){
  4002e4:	b500      	push	{lr}
  4002e6:	b083      	sub	sp, #12
	uint8_t rx_data;
	uint32_t status = uart_get_status(UART1);
  4002e8:	4809      	ldr	r0, [pc, #36]	; (400310 <UART1_Handler+0x2c>)
  4002ea:	4b0a      	ldr	r3, [pc, #40]	; (400314 <UART1_Handler+0x30>)
  4002ec:	4798      	blx	r3
	
	if(status & UART_SR_RXRDY){
  4002ee:	f010 0f01 	tst.w	r0, #1
  4002f2:	d102      	bne.n	4002fa <UART1_Handler+0x16>
		uart_read(UART1, &rx_data);
		
		//pass to upper layer
		uart1_callback(rx_data);
	}
}
  4002f4:	b003      	add	sp, #12
  4002f6:	f85d fb04 	ldr.w	pc, [sp], #4
		uart_read(UART1, &rx_data);
  4002fa:	f10d 0107 	add.w	r1, sp, #7
  4002fe:	4804      	ldr	r0, [pc, #16]	; (400310 <UART1_Handler+0x2c>)
  400300:	4b05      	ldr	r3, [pc, #20]	; (400318 <UART1_Handler+0x34>)
  400302:	4798      	blx	r3
		uart1_callback(rx_data);
  400304:	4b05      	ldr	r3, [pc, #20]	; (40031c <UART1_Handler+0x38>)
  400306:	681b      	ldr	r3, [r3, #0]
  400308:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40030c:	4798      	blx	r3
}
  40030e:	e7f1      	b.n	4002f4 <UART1_Handler+0x10>
  400310:	400e0800 	.word	0x400e0800
  400314:	00400cb5 	.word	0x00400cb5
  400318:	00400cb9 	.word	0x00400cb9
  40031c:	20000458 	.word	0x20000458

00400320 <init_sequence>:
	//(At the end LEDs and display are initialized)
	init_sequence();

}

void init_sequence(void){
  400320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		
	//All LEDs On
	hal_led_write(Led0, LedOn);
  400324:	2101      	movs	r1, #1
  400326:	2000      	movs	r0, #0
  400328:	4c1a      	ldr	r4, [pc, #104]	; (400394 <init_sequence+0x74>)
  40032a:	47a0      	blx	r4
	hal_led_write(Led1, LedOn);
  40032c:	2101      	movs	r1, #1
  40032e:	4608      	mov	r0, r1
  400330:	47a0      	blx	r4
	hal_led_write(Led2, LedOn);
  400332:	2101      	movs	r1, #1
  400334:	2002      	movs	r0, #2
  400336:	47a0      	blx	r4
	hal_led_write(Led3, LedOn);
  400338:	2101      	movs	r1, #1
  40033a:	2003      	movs	r0, #3
  40033c:	47a0      	blx	r4
	hal_led_write(Led4, LedOn);
  40033e:	2101      	movs	r1, #1
  400340:	2004      	movs	r0, #4
  400342:	47a0      	blx	r4
		
	//Screen "on"
	for(uint32_t i=0; i<4; i++){	 //rows
  400344:	2700      	movs	r7, #0
		hal_display_gotoxy(0, i);
  400346:	46b9      	mov	r9, r7
  400348:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4003a4 <init_sequence+0x84>
		for(uint32_t j=0; j<95; j++) //columns
		hal_display_putc('|');
  40034c:	4e12      	ldr	r6, [pc, #72]	; (400398 <init_sequence+0x78>)
		hal_display_gotoxy(0, i);
  40034e:	4639      	mov	r1, r7
  400350:	4648      	mov	r0, r9
  400352:	47c0      	blx	r8
  400354:	245f      	movs	r4, #95	; 0x5f
		hal_display_putc('|');
  400356:	257c      	movs	r5, #124	; 0x7c
  400358:	4628      	mov	r0, r5
  40035a:	47b0      	blx	r6
		for(uint32_t j=0; j<95; j++) //columns
  40035c:	3c01      	subs	r4, #1
  40035e:	d1fb      	bne.n	400358 <init_sequence+0x38>
	for(uint32_t i=0; i<4; i++){	 //rows
  400360:	3701      	adds	r7, #1
  400362:	2f04      	cmp	r7, #4
  400364:	d1f3      	bne.n	40034e <init_sequence+0x2e>
	}

	//Wait...
	hal_delay(200);
  400366:	20c8      	movs	r0, #200	; 0xc8
  400368:	4b0c      	ldr	r3, [pc, #48]	; (40039c <init_sequence+0x7c>)
  40036a:	4798      	blx	r3
	
	//All LEDs Off
	hal_led_write(Led0, LedOff);
  40036c:	2100      	movs	r1, #0
  40036e:	4608      	mov	r0, r1
  400370:	4c08      	ldr	r4, [pc, #32]	; (400394 <init_sequence+0x74>)
  400372:	47a0      	blx	r4
	hal_led_write(Led1, LedOff);
  400374:	2100      	movs	r1, #0
  400376:	2001      	movs	r0, #1
  400378:	47a0      	blx	r4
	hal_led_write(Led2, LedOff);
  40037a:	2100      	movs	r1, #0
  40037c:	2002      	movs	r0, #2
  40037e:	47a0      	blx	r4
	hal_led_write(Led3, LedOff);
  400380:	2100      	movs	r1, #0
  400382:	2003      	movs	r0, #3
  400384:	47a0      	blx	r4
	hal_led_write(Led4, LedOff);
  400386:	2100      	movs	r1, #0
  400388:	2004      	movs	r0, #4
  40038a:	47a0      	blx	r4
		
	//clear screen
	hal_display_cls();
  40038c:	4b04      	ldr	r3, [pc, #16]	; (4003a0 <init_sequence+0x80>)
  40038e:	4798      	blx	r3
  400390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400394:	004001e9 	.word	0x004001e9
  400398:	004002dd 	.word	0x004002dd
  40039c:	00400149 	.word	0x00400149
  4003a0:	004002df 	.word	0x004002df
  4003a4:	004002e1 	.word	0x004002e1

004003a8 <io_init_state>:
void io_init_state(void){
  4003a8:	b530      	push	{r4, r5, lr}
  4003aa:	b087      	sub	sp, #28
	hal_led_start();
  4003ac:	4b09      	ldr	r3, [pc, #36]	; (4003d4 <io_init_state+0x2c>)
  4003ae:	4798      	blx	r3
	hal_clock_start();
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <io_init_state+0x30>)
  4003b2:	4798      	blx	r3
	tTime time = {
  4003b4:	466c      	mov	r4, sp
  4003b6:	4d09      	ldr	r5, [pc, #36]	; (4003dc <io_init_state+0x34>)
  4003b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4003ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4003bc:	e895 0003 	ldmia.w	r5, {r0, r1}
  4003c0:	e884 0003 	stmia.w	r4, {r0, r1}
	hal_clock_write(&time);
  4003c4:	4668      	mov	r0, sp
  4003c6:	4b06      	ldr	r3, [pc, #24]	; (4003e0 <io_init_state+0x38>)
  4003c8:	4798      	blx	r3
	init_sequence();
  4003ca:	4b06      	ldr	r3, [pc, #24]	; (4003e4 <io_init_state+0x3c>)
  4003cc:	4798      	blx	r3
}
  4003ce:	b007      	add	sp, #28
  4003d0:	bd30      	pop	{r4, r5, pc}
  4003d2:	bf00      	nop
  4003d4:	004001a5 	.word	0x004001a5
  4003d8:	00400239 	.word	0x00400239
  4003dc:	004013fc 	.word	0x004013fc
  4003e0:	00400265 	.word	0x00400265
  4003e4:	00400321 	.word	0x00400321

004003e8 <system_init>:
void system_init(void){
  4003e8:	b508      	push	{r3, lr}
	hal_cpu_init();			
  4003ea:	4b03      	ldr	r3, [pc, #12]	; (4003f8 <system_init+0x10>)
  4003ec:	4798      	blx	r3
	hal_io_init();		
  4003ee:	4b03      	ldr	r3, [pc, #12]	; (4003fc <system_init+0x14>)
  4003f0:	4798      	blx	r3
	io_init_state();
  4003f2:	4b03      	ldr	r3, [pc, #12]	; (400400 <system_init+0x18>)
  4003f4:	4798      	blx	r3
  4003f6:	bd08      	pop	{r3, pc}
  4003f8:	00400139 	.word	0x00400139
  4003fc:	00400185 	.word	0x00400185
  400400:	004003a9 	.word	0x004003a9

00400404 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400404:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400406:	480e      	ldr	r0, [pc, #56]	; (400440 <sysclk_init+0x3c>)
  400408:	4b0e      	ldr	r3, [pc, #56]	; (400444 <sysclk_init+0x40>)
  40040a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40040c:	213e      	movs	r1, #62	; 0x3e
  40040e:	2000      	movs	r0, #0
  400410:	4b0d      	ldr	r3, [pc, #52]	; (400448 <sysclk_init+0x44>)
  400412:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400414:	4c0d      	ldr	r4, [pc, #52]	; (40044c <sysclk_init+0x48>)
  400416:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400418:	2800      	cmp	r0, #0
  40041a:	d0fc      	beq.n	400416 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40041c:	4b0c      	ldr	r3, [pc, #48]	; (400450 <sysclk_init+0x4c>)
  40041e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400420:	4a0c      	ldr	r2, [pc, #48]	; (400454 <sysclk_init+0x50>)
  400422:	4b0d      	ldr	r3, [pc, #52]	; (400458 <sysclk_init+0x54>)
  400424:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400426:	4c0d      	ldr	r4, [pc, #52]	; (40045c <sysclk_init+0x58>)
  400428:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40042a:	2800      	cmp	r0, #0
  40042c:	d0fc      	beq.n	400428 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40042e:	2010      	movs	r0, #16
  400430:	4b0b      	ldr	r3, [pc, #44]	; (400460 <sysclk_init+0x5c>)
  400432:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400434:	4b0b      	ldr	r3, [pc, #44]	; (400464 <sysclk_init+0x60>)
  400436:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400438:	4801      	ldr	r0, [pc, #4]	; (400440 <sysclk_init+0x3c>)
  40043a:	4b02      	ldr	r3, [pc, #8]	; (400444 <sysclk_init+0x40>)
  40043c:	4798      	blx	r3
  40043e:	bd10      	pop	{r4, pc}
  400440:	07270e00 	.word	0x07270e00
  400444:	00400e91 	.word	0x00400e91
  400448:	004009ad 	.word	0x004009ad
  40044c:	00400a01 	.word	0x00400a01
  400450:	00400a11 	.word	0x00400a11
  400454:	20133f01 	.word	0x20133f01
  400458:	400e0400 	.word	0x400e0400
  40045c:	00400a21 	.word	0x00400a21
  400460:	00400905 	.word	0x00400905
  400464:	00400d81 	.word	0x00400d81

00400468 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40046a:	4838      	ldr	r0, [pc, #224]	; (40054c <board_init+0xe4>)
  40046c:	4b38      	ldr	r3, [pc, #224]	; (400550 <board_init+0xe8>)
  40046e:	4798      	blx	r3
  400470:	200b      	movs	r0, #11
  400472:	4c38      	ldr	r4, [pc, #224]	; (400554 <board_init+0xec>)
  400474:	47a0      	blx	r4
  400476:	200c      	movs	r0, #12
  400478:	47a0      	blx	r4
  40047a:	200d      	movs	r0, #13
  40047c:	47a0      	blx	r4
  40047e:	4b36      	ldr	r3, [pc, #216]	; (400558 <board_init+0xf0>)
  400480:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400484:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400486:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400488:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40048c:	4c33      	ldr	r4, [pc, #204]	; (40055c <board_init+0xf4>)
  40048e:	2504      	movs	r5, #4
  400490:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400492:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400496:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400498:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40049c:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40049e:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004a4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4004a6:	f022 0204 	bic.w	r2, r2, #4
  4004aa:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ac:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4004ae:	f022 0204 	bic.w	r2, r2, #4
  4004b2:	6762      	str	r2, [r4, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4004b8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ba:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4004c4:	6322      	str	r2, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004c6:	6122      	str	r2, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004c8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004d0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004d2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4004d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4004dc:	210c      	movs	r1, #12
  4004de:	4820      	ldr	r0, [pc, #128]	; (400560 <board_init+0xf8>)
  4004e0:	4b20      	ldr	r3, [pc, #128]	; (400564 <board_init+0xfc>)
  4004e2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4004e4:	4f20      	ldr	r7, [pc, #128]	; (400568 <board_init+0x100>)
  4004e6:	4639      	mov	r1, r7
  4004e8:	2003      	movs	r0, #3
  4004ea:	4e20      	ldr	r6, [pc, #128]	; (40056c <board_init+0x104>)
  4004ec:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4004ee:	4639      	mov	r1, r7
  4004f0:	4628      	mov	r0, r5
  4004f2:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4004f4:	4639      	mov	r1, r7
  4004f6:	200c      	movs	r0, #12
  4004f8:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4004fa:	4639      	mov	r1, r7
  4004fc:	200d      	movs	r0, #13
  4004fe:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400500:	4639      	mov	r1, r7
  400502:	200e      	movs	r0, #14
  400504:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  400506:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40050a:	2009      	movs	r0, #9
  40050c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  40050e:	4918      	ldr	r1, [pc, #96]	; (400570 <board_init+0x108>)
  400510:	200a      	movs	r0, #10
  400512:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  400514:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  400518:	4639      	mov	r1, r7
  40051a:	2055      	movs	r0, #85	; 0x55
  40051c:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  40051e:	4639      	mov	r1, r7
  400520:	205f      	movs	r0, #95	; 0x5f
  400522:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  400524:	4913      	ldr	r1, [pc, #76]	; (400574 <board_init+0x10c>)
  400526:	204c      	movs	r0, #76	; 0x4c
  400528:	47b0      	blx	r6
		base->PIO_PUER = mask;
  40052a:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40052c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400530:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400532:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400534:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400538:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40053a:	f023 0304 	bic.w	r3, r3, #4
  40053e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400540:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400542:	f023 0304 	bic.w	r3, r3, #4
  400546:	6763      	str	r3, [r4, #116]	; 0x74
  400548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40054a:	bf00      	nop
  40054c:	400e1450 	.word	0x400e1450
  400550:	00400ccb 	.word	0x00400ccb
  400554:	00400a31 	.word	0x00400a31
  400558:	400e1200 	.word	0x400e1200
  40055c:	400e0e00 	.word	0x400e0e00
  400560:	400e1000 	.word	0x400e1000
  400564:	00400789 	.word	0x00400789
  400568:	08000001 	.word	0x08000001
  40056c:	00400669 	.word	0x00400669
  400570:	10000001 	.word	0x10000001
  400574:	28000001 	.word	0x28000001

00400578 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400578:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40057a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40057e:	d039      	beq.n	4005f4 <pio_set_peripheral+0x7c>
  400580:	d813      	bhi.n	4005aa <pio_set_peripheral+0x32>
  400582:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400586:	d025      	beq.n	4005d4 <pio_set_peripheral+0x5c>
  400588:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40058c:	d10a      	bne.n	4005a4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40058e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400590:	4313      	orrs	r3, r2
  400592:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400594:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400596:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400598:	400b      	ands	r3, r1
  40059a:	ea23 0302 	bic.w	r3, r3, r2
  40059e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005a0:	6042      	str	r2, [r0, #4]
  4005a2:	4770      	bx	lr
	switch (ul_type) {
  4005a4:	2900      	cmp	r1, #0
  4005a6:	d1fb      	bne.n	4005a0 <pio_set_peripheral+0x28>
  4005a8:	4770      	bx	lr
  4005aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4005ae:	d020      	beq.n	4005f2 <pio_set_peripheral+0x7a>
  4005b0:	d809      	bhi.n	4005c6 <pio_set_peripheral+0x4e>
  4005b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4005b6:	d1f3      	bne.n	4005a0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005ba:	4313      	orrs	r3, r2
  4005bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4005be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005c0:	4313      	orrs	r3, r2
  4005c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005c4:	e7ec      	b.n	4005a0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4005c6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4005ca:	d012      	beq.n	4005f2 <pio_set_peripheral+0x7a>
  4005cc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4005d0:	d00f      	beq.n	4005f2 <pio_set_peripheral+0x7a>
  4005d2:	e7e5      	b.n	4005a0 <pio_set_peripheral+0x28>
{
  4005d4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005d8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4005da:	43d3      	mvns	r3, r2
  4005dc:	4021      	ands	r1, r4
  4005de:	461c      	mov	r4, r3
  4005e0:	4019      	ands	r1, r3
  4005e2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4005e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4005e8:	400b      	ands	r3, r1
  4005ea:	4023      	ands	r3, r4
  4005ec:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4005ee:	6042      	str	r2, [r0, #4]
}
  4005f0:	bc10      	pop	{r4}
  4005f2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005f6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4005f8:	400b      	ands	r3, r1
  4005fa:	ea23 0302 	bic.w	r3, r3, r2
  4005fe:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400600:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400602:	4313      	orrs	r3, r2
  400604:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400606:	e7cb      	b.n	4005a0 <pio_set_peripheral+0x28>

00400608 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400608:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40060a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40060e:	bf14      	ite	ne
  400610:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400612:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400614:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400618:	bf14      	ite	ne
  40061a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  40061c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40061e:	f012 0f02 	tst.w	r2, #2
  400622:	d107      	bne.n	400634 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400624:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400628:	bf18      	it	ne
  40062a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40062e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400630:	6001      	str	r1, [r0, #0]
  400632:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400634:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400638:	e7f9      	b.n	40062e <pio_set_input+0x26>

0040063a <pio_set_output>:
{
  40063a:	b410      	push	{r4}
  40063c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40063e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400640:	b944      	cbnz	r4, 400654 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400642:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400644:	b143      	cbz	r3, 400658 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400646:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400648:	b942      	cbnz	r2, 40065c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40064a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40064c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40064e:	6001      	str	r1, [r0, #0]
}
  400650:	bc10      	pop	{r4}
  400652:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400654:	6641      	str	r1, [r0, #100]	; 0x64
  400656:	e7f5      	b.n	400644 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400658:	6541      	str	r1, [r0, #84]	; 0x54
  40065a:	e7f5      	b.n	400648 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40065c:	6301      	str	r1, [r0, #48]	; 0x30
  40065e:	e7f5      	b.n	40064c <pio_set_output+0x12>

00400660 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400660:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400662:	4770      	bx	lr

00400664 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400664:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400666:	4770      	bx	lr

00400668 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400668:	b570      	push	{r4, r5, r6, lr}
  40066a:	b082      	sub	sp, #8
  40066c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40066e:	0943      	lsrs	r3, r0, #5
  400670:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400674:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400678:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40067a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400682:	d053      	beq.n	40072c <pio_configure_pin+0xc4>
  400684:	d80a      	bhi.n	40069c <pio_configure_pin+0x34>
  400686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40068a:	d02d      	beq.n	4006e8 <pio_configure_pin+0x80>
  40068c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400690:	d03b      	beq.n	40070a <pio_configure_pin+0xa2>
  400692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400696:	d015      	beq.n	4006c4 <pio_configure_pin+0x5c>
		return 0;
  400698:	2000      	movs	r0, #0
  40069a:	e023      	b.n	4006e4 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  40069c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4006a0:	d055      	beq.n	40074e <pio_configure_pin+0xe6>
  4006a2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4006a6:	d052      	beq.n	40074e <pio_configure_pin+0xe6>
  4006a8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4006ac:	d1f4      	bne.n	400698 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4006ae:	f000 011f 	and.w	r1, r0, #31
  4006b2:	2601      	movs	r6, #1
  4006b4:	462a      	mov	r2, r5
  4006b6:	fa06 f101 	lsl.w	r1, r6, r1
  4006ba:	4620      	mov	r0, r4
  4006bc:	4b2f      	ldr	r3, [pc, #188]	; (40077c <pio_configure_pin+0x114>)
  4006be:	4798      	blx	r3
	return 1;
  4006c0:	4630      	mov	r0, r6
		break;
  4006c2:	e00f      	b.n	4006e4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4006c4:	f000 001f 	and.w	r0, r0, #31
  4006c8:	2601      	movs	r6, #1
  4006ca:	4086      	lsls	r6, r0
  4006cc:	4632      	mov	r2, r6
  4006ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006d2:	4620      	mov	r0, r4
  4006d4:	4b2a      	ldr	r3, [pc, #168]	; (400780 <pio_configure_pin+0x118>)
  4006d6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006d8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006dc:	bf14      	ite	ne
  4006de:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4006e0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4006e2:	2001      	movs	r0, #1
}
  4006e4:	b002      	add	sp, #8
  4006e6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4006e8:	f000 001f 	and.w	r0, r0, #31
  4006ec:	2601      	movs	r6, #1
  4006ee:	4086      	lsls	r6, r0
  4006f0:	4632      	mov	r2, r6
  4006f2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006f6:	4620      	mov	r0, r4
  4006f8:	4b21      	ldr	r3, [pc, #132]	; (400780 <pio_configure_pin+0x118>)
  4006fa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006fc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400700:	bf14      	ite	ne
  400702:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400704:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400706:	2001      	movs	r0, #1
  400708:	e7ec      	b.n	4006e4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40070a:	f000 001f 	and.w	r0, r0, #31
  40070e:	2601      	movs	r6, #1
  400710:	4086      	lsls	r6, r0
  400712:	4632      	mov	r2, r6
  400714:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400718:	4620      	mov	r0, r4
  40071a:	4b19      	ldr	r3, [pc, #100]	; (400780 <pio_configure_pin+0x118>)
  40071c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40071e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400722:	bf14      	ite	ne
  400724:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400726:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400728:	2001      	movs	r0, #1
  40072a:	e7db      	b.n	4006e4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40072c:	f000 001f 	and.w	r0, r0, #31
  400730:	2601      	movs	r6, #1
  400732:	4086      	lsls	r6, r0
  400734:	4632      	mov	r2, r6
  400736:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40073a:	4620      	mov	r0, r4
  40073c:	4b10      	ldr	r3, [pc, #64]	; (400780 <pio_configure_pin+0x118>)
  40073e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400740:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400744:	bf14      	ite	ne
  400746:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400748:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40074a:	2001      	movs	r0, #1
  40074c:	e7ca      	b.n	4006e4 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40074e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400752:	f000 011f 	and.w	r1, r0, #31
  400756:	2601      	movs	r6, #1
  400758:	ea05 0306 	and.w	r3, r5, r6
  40075c:	9300      	str	r3, [sp, #0]
  40075e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400762:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400766:	bf14      	ite	ne
  400768:	2200      	movne	r2, #0
  40076a:	2201      	moveq	r2, #1
  40076c:	fa06 f101 	lsl.w	r1, r6, r1
  400770:	4620      	mov	r0, r4
  400772:	4c04      	ldr	r4, [pc, #16]	; (400784 <pio_configure_pin+0x11c>)
  400774:	47a0      	blx	r4
	return 1;
  400776:	4630      	mov	r0, r6
		break;
  400778:	e7b4      	b.n	4006e4 <pio_configure_pin+0x7c>
  40077a:	bf00      	nop
  40077c:	00400609 	.word	0x00400609
  400780:	00400579 	.word	0x00400579
  400784:	0040063b 	.word	0x0040063b

00400788 <pio_configure_pin_group>:
{
  400788:	b570      	push	{r4, r5, r6, lr}
  40078a:	b082      	sub	sp, #8
  40078c:	4605      	mov	r5, r0
  40078e:	460e      	mov	r6, r1
  400790:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  400792:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40079a:	d03d      	beq.n	400818 <pio_configure_pin_group+0x90>
  40079c:	d80a      	bhi.n	4007b4 <pio_configure_pin_group+0x2c>
  40079e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007a2:	d021      	beq.n	4007e8 <pio_configure_pin_group+0x60>
  4007a4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007a8:	d02a      	beq.n	400800 <pio_configure_pin_group+0x78>
  4007aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007ae:	d00e      	beq.n	4007ce <pio_configure_pin_group+0x46>
		return 0;
  4007b0:	2000      	movs	r0, #0
  4007b2:	e017      	b.n	4007e4 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4007b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007b8:	d03a      	beq.n	400830 <pio_configure_pin_group+0xa8>
  4007ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007be:	d037      	beq.n	400830 <pio_configure_pin_group+0xa8>
  4007c0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007c4:	d1f4      	bne.n	4007b0 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  4007c6:	4b23      	ldr	r3, [pc, #140]	; (400854 <pio_configure_pin_group+0xcc>)
  4007c8:	4798      	blx	r3
	return 1;
  4007ca:	2001      	movs	r0, #1
		break;
  4007cc:	e00a      	b.n	4007e4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4007ce:	460a      	mov	r2, r1
  4007d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007d4:	4b20      	ldr	r3, [pc, #128]	; (400858 <pio_configure_pin_group+0xd0>)
  4007d6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4007d8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4007dc:	bf14      	ite	ne
  4007de:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4007e0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4007e2:	2001      	movs	r0, #1
}
  4007e4:	b002      	add	sp, #8
  4007e6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4007e8:	460a      	mov	r2, r1
  4007ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007ee:	4b1a      	ldr	r3, [pc, #104]	; (400858 <pio_configure_pin_group+0xd0>)
  4007f0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4007f2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4007f6:	bf14      	ite	ne
  4007f8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4007fa:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4007fc:	2001      	movs	r0, #1
  4007fe:	e7f1      	b.n	4007e4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400800:	460a      	mov	r2, r1
  400802:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400806:	4b14      	ldr	r3, [pc, #80]	; (400858 <pio_configure_pin_group+0xd0>)
  400808:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40080a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40080e:	bf14      	ite	ne
  400810:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400812:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400814:	2001      	movs	r0, #1
  400816:	e7e5      	b.n	4007e4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400818:	460a      	mov	r2, r1
  40081a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <pio_configure_pin_group+0xd0>)
  400820:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400822:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400826:	bf14      	ite	ne
  400828:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40082a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40082c:	2001      	movs	r0, #1
  40082e:	e7d9      	b.n	4007e4 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400830:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400834:	f004 0301 	and.w	r3, r4, #1
  400838:	9300      	str	r3, [sp, #0]
  40083a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40083e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400842:	bf14      	ite	ne
  400844:	2200      	movne	r2, #0
  400846:	2201      	moveq	r2, #1
  400848:	4631      	mov	r1, r6
  40084a:	4628      	mov	r0, r5
  40084c:	4c03      	ldr	r4, [pc, #12]	; (40085c <pio_configure_pin_group+0xd4>)
  40084e:	47a0      	blx	r4
	return 1;
  400850:	2001      	movs	r0, #1
		break;
  400852:	e7c7      	b.n	4007e4 <pio_configure_pin_group+0x5c>
  400854:	00400609 	.word	0x00400609
  400858:	00400579 	.word	0x00400579
  40085c:	0040063b 	.word	0x0040063b

00400860 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400864:	4681      	mov	r9, r0
  400866:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400868:	4b12      	ldr	r3, [pc, #72]	; (4008b4 <pio_handler_process+0x54>)
  40086a:	4798      	blx	r3
  40086c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40086e:	4648      	mov	r0, r9
  400870:	4b11      	ldr	r3, [pc, #68]	; (4008b8 <pio_handler_process+0x58>)
  400872:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400874:	4005      	ands	r5, r0
  400876:	d013      	beq.n	4008a0 <pio_handler_process+0x40>
  400878:	4c10      	ldr	r4, [pc, #64]	; (4008bc <pio_handler_process+0x5c>)
  40087a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40087e:	e003      	b.n	400888 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400880:	42b4      	cmp	r4, r6
  400882:	d00d      	beq.n	4008a0 <pio_handler_process+0x40>
  400884:	3410      	adds	r4, #16
		while (status != 0) {
  400886:	b15d      	cbz	r5, 4008a0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400888:	6820      	ldr	r0, [r4, #0]
  40088a:	42b8      	cmp	r0, r7
  40088c:	d1f8      	bne.n	400880 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40088e:	6861      	ldr	r1, [r4, #4]
  400890:	4229      	tst	r1, r5
  400892:	d0f5      	beq.n	400880 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400894:	68e3      	ldr	r3, [r4, #12]
  400896:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400898:	6863      	ldr	r3, [r4, #4]
  40089a:	ea25 0503 	bic.w	r5, r5, r3
  40089e:	e7ef      	b.n	400880 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008a0:	4b07      	ldr	r3, [pc, #28]	; (4008c0 <pio_handler_process+0x60>)
  4008a2:	681b      	ldr	r3, [r3, #0]
  4008a4:	b123      	cbz	r3, 4008b0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4008a6:	4b07      	ldr	r3, [pc, #28]	; (4008c4 <pio_handler_process+0x64>)
  4008a8:	681b      	ldr	r3, [r3, #0]
  4008aa:	b10b      	cbz	r3, 4008b0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4008ac:	4648      	mov	r0, r9
  4008ae:	4798      	blx	r3
  4008b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008b4:	00400661 	.word	0x00400661
  4008b8:	00400665 	.word	0x00400665
  4008bc:	2000045c 	.word	0x2000045c
  4008c0:	200004d0 	.word	0x200004d0
  4008c4:	200004cc 	.word	0x200004cc

004008c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4008c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4008ca:	210b      	movs	r1, #11
  4008cc:	4801      	ldr	r0, [pc, #4]	; (4008d4 <PIOA_Handler+0xc>)
  4008ce:	4b02      	ldr	r3, [pc, #8]	; (4008d8 <PIOA_Handler+0x10>)
  4008d0:	4798      	blx	r3
  4008d2:	bd08      	pop	{r3, pc}
  4008d4:	400e0e00 	.word	0x400e0e00
  4008d8:	00400861 	.word	0x00400861

004008dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4008dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4008de:	210c      	movs	r1, #12
  4008e0:	4801      	ldr	r0, [pc, #4]	; (4008e8 <PIOB_Handler+0xc>)
  4008e2:	4b02      	ldr	r3, [pc, #8]	; (4008ec <PIOB_Handler+0x10>)
  4008e4:	4798      	blx	r3
  4008e6:	bd08      	pop	{r3, pc}
  4008e8:	400e1000 	.word	0x400e1000
  4008ec:	00400861 	.word	0x00400861

004008f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4008f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4008f2:	210d      	movs	r1, #13
  4008f4:	4801      	ldr	r0, [pc, #4]	; (4008fc <PIOC_Handler+0xc>)
  4008f6:	4b02      	ldr	r3, [pc, #8]	; (400900 <PIOC_Handler+0x10>)
  4008f8:	4798      	blx	r3
  4008fa:	bd08      	pop	{r3, pc}
  4008fc:	400e1200 	.word	0x400e1200
  400900:	00400861 	.word	0x00400861

00400904 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400904:	4a17      	ldr	r2, [pc, #92]	; (400964 <pmc_switch_mck_to_pllack+0x60>)
  400906:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40090c:	4318      	orrs	r0, r3
  40090e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400910:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400912:	f013 0f08 	tst.w	r3, #8
  400916:	d10a      	bne.n	40092e <pmc_switch_mck_to_pllack+0x2a>
  400918:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40091c:	4911      	ldr	r1, [pc, #68]	; (400964 <pmc_switch_mck_to_pllack+0x60>)
  40091e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400920:	f012 0f08 	tst.w	r2, #8
  400924:	d103      	bne.n	40092e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400926:	3b01      	subs	r3, #1
  400928:	d1f9      	bne.n	40091e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40092a:	2001      	movs	r0, #1
  40092c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40092e:	4a0d      	ldr	r2, [pc, #52]	; (400964 <pmc_switch_mck_to_pllack+0x60>)
  400930:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400932:	f023 0303 	bic.w	r3, r3, #3
  400936:	f043 0302 	orr.w	r3, r3, #2
  40093a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40093c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40093e:	f013 0f08 	tst.w	r3, #8
  400942:	d10a      	bne.n	40095a <pmc_switch_mck_to_pllack+0x56>
  400944:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400948:	4906      	ldr	r1, [pc, #24]	; (400964 <pmc_switch_mck_to_pllack+0x60>)
  40094a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40094c:	f012 0f08 	tst.w	r2, #8
  400950:	d105      	bne.n	40095e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400952:	3b01      	subs	r3, #1
  400954:	d1f9      	bne.n	40094a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400956:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400958:	4770      	bx	lr
	return 0;
  40095a:	2000      	movs	r0, #0
  40095c:	4770      	bx	lr
  40095e:	2000      	movs	r0, #0
  400960:	4770      	bx	lr
  400962:	bf00      	nop
  400964:	400e0400 	.word	0x400e0400

00400968 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400968:	2801      	cmp	r0, #1
  40096a:	d003      	beq.n	400974 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40096c:	4a05      	ldr	r2, [pc, #20]	; (400984 <pmc_switch_sclk_to_32kxtal+0x1c>)
  40096e:	4b06      	ldr	r3, [pc, #24]	; (400988 <pmc_switch_sclk_to_32kxtal+0x20>)
  400970:	601a      	str	r2, [r3, #0]
  400972:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400974:	4a04      	ldr	r2, [pc, #16]	; (400988 <pmc_switch_sclk_to_32kxtal+0x20>)
  400976:	6893      	ldr	r3, [r2, #8]
  400978:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40097c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400980:	6093      	str	r3, [r2, #8]
  400982:	e7f3      	b.n	40096c <pmc_switch_sclk_to_32kxtal+0x4>
  400984:	a5000008 	.word	0xa5000008
  400988:	400e1410 	.word	0x400e1410

0040098c <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40098c:	4b05      	ldr	r3, [pc, #20]	; (4009a4 <pmc_osc_is_ready_32kxtal+0x18>)
  40098e:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400990:	f013 0f80 	tst.w	r3, #128	; 0x80
  400994:	bf1d      	ittte	ne
  400996:	4b04      	ldrne	r3, [pc, #16]	; (4009a8 <pmc_osc_is_ready_32kxtal+0x1c>)
  400998:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  40099a:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  40099e:	2000      	moveq	r0, #0
}
  4009a0:	4770      	bx	lr
  4009a2:	bf00      	nop
  4009a4:	400e1410 	.word	0x400e1410
  4009a8:	400e0400 	.word	0x400e0400

004009ac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009ac:	b9c8      	cbnz	r0, 4009e2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009ae:	4a11      	ldr	r2, [pc, #68]	; (4009f4 <pmc_switch_mainck_to_xtal+0x48>)
  4009b0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4009b2:	0209      	lsls	r1, r1, #8
  4009b4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009b6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4009ba:	f023 0303 	bic.w	r3, r3, #3
  4009be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009c2:	f043 0301 	orr.w	r3, r3, #1
  4009c6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009c8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4009ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009cc:	f013 0f01 	tst.w	r3, #1
  4009d0:	d0fb      	beq.n	4009ca <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4009d2:	4a08      	ldr	r2, [pc, #32]	; (4009f4 <pmc_switch_mainck_to_xtal+0x48>)
  4009d4:	6a13      	ldr	r3, [r2, #32]
  4009d6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4009da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4009de:	6213      	str	r3, [r2, #32]
  4009e0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009e2:	4904      	ldr	r1, [pc, #16]	; (4009f4 <pmc_switch_mainck_to_xtal+0x48>)
  4009e4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009e6:	4a04      	ldr	r2, [pc, #16]	; (4009f8 <pmc_switch_mainck_to_xtal+0x4c>)
  4009e8:	401a      	ands	r2, r3
  4009ea:	4b04      	ldr	r3, [pc, #16]	; (4009fc <pmc_switch_mainck_to_xtal+0x50>)
  4009ec:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009ee:	620b      	str	r3, [r1, #32]
  4009f0:	4770      	bx	lr
  4009f2:	bf00      	nop
  4009f4:	400e0400 	.word	0x400e0400
  4009f8:	fec8fffc 	.word	0xfec8fffc
  4009fc:	01370002 	.word	0x01370002

00400a00 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a00:	4b02      	ldr	r3, [pc, #8]	; (400a0c <pmc_osc_is_ready_mainck+0xc>)
  400a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a04:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e0400 	.word	0x400e0400

00400a10 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a14:	4b01      	ldr	r3, [pc, #4]	; (400a1c <pmc_disable_pllack+0xc>)
  400a16:	629a      	str	r2, [r3, #40]	; 0x28
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	400e0400 	.word	0x400e0400

00400a20 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a20:	4b02      	ldr	r3, [pc, #8]	; (400a2c <pmc_is_locked_pllack+0xc>)
  400a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a24:	f000 0002 	and.w	r0, r0, #2
  400a28:	4770      	bx	lr
  400a2a:	bf00      	nop
  400a2c:	400e0400 	.word	0x400e0400

00400a30 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400a30:	2822      	cmp	r0, #34	; 0x22
  400a32:	d81e      	bhi.n	400a72 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400a34:	281f      	cmp	r0, #31
  400a36:	d80c      	bhi.n	400a52 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a38:	4b11      	ldr	r3, [pc, #68]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a3a:	699a      	ldr	r2, [r3, #24]
  400a3c:	2301      	movs	r3, #1
  400a3e:	4083      	lsls	r3, r0
  400a40:	4393      	bics	r3, r2
  400a42:	d018      	beq.n	400a76 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a44:	2301      	movs	r3, #1
  400a46:	fa03 f000 	lsl.w	r0, r3, r0
  400a4a:	4b0d      	ldr	r3, [pc, #52]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a4c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a4e:	2000      	movs	r0, #0
  400a50:	4770      	bx	lr
		ul_id -= 32;
  400a52:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400a54:	4b0a      	ldr	r3, [pc, #40]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a56:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400a5a:	2301      	movs	r3, #1
  400a5c:	4083      	lsls	r3, r0
  400a5e:	4393      	bics	r3, r2
  400a60:	d00b      	beq.n	400a7a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400a62:	2301      	movs	r3, #1
  400a64:	fa03 f000 	lsl.w	r0, r3, r0
  400a68:	4b05      	ldr	r3, [pc, #20]	; (400a80 <pmc_enable_periph_clk+0x50>)
  400a6a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400a6e:	2000      	movs	r0, #0
  400a70:	4770      	bx	lr
		return 1;
  400a72:	2001      	movs	r0, #1
  400a74:	4770      	bx	lr
	return 0;
  400a76:	2000      	movs	r0, #0
  400a78:	4770      	bx	lr
  400a7a:	2000      	movs	r0, #0
}
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop
  400a80:	400e0400 	.word	0x400e0400

00400a84 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  400a84:	b921      	cbnz	r1, 400a90 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  400a86:	6843      	ldr	r3, [r0, #4]
  400a88:	f023 0301 	bic.w	r3, r3, #1
  400a8c:	6043      	str	r3, [r0, #4]
  400a8e:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400a90:	6843      	ldr	r3, [r0, #4]
  400a92:	f043 0301 	orr.w	r3, r3, #1
  400a96:	6043      	str	r3, [r0, #4]
  400a98:	4770      	bx	lr

00400a9a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400a9a:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400a9c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400a9e:	6884      	ldr	r4, [r0, #8]
  400aa0:	42a5      	cmp	r5, r4
  400aa2:	d003      	beq.n	400aac <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  400aa4:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400aa6:	6884      	ldr	r4, [r0, #8]
  400aa8:	42ac      	cmp	r4, r5
  400aaa:	d1fb      	bne.n	400aa4 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400aac:	b161      	cbz	r1, 400ac8 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400aae:	f3c4 5001 	ubfx	r0, r4, #20, #2
  400ab2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400ab6:	f3c4 4003 	ubfx	r0, r4, #16, #4
  400aba:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400abe:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  400ac2:	bf18      	it	ne
  400ac4:	300c      	addne	r0, #12
  400ac6:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400ac8:	b142      	cbz	r2, 400adc <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400aca:	f3c4 3102 	ubfx	r1, r4, #12, #3
  400ace:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  400ad2:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400ad6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400ada:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400adc:	b143      	cbz	r3, 400af0 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400ade:	f3c4 1202 	ubfx	r2, r4, #4, #3
  400ae2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400ae6:	f004 040f 	and.w	r4, r4, #15
  400aea:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  400aee:	601c      	str	r4, [r3, #0]
	}
}
  400af0:	bc30      	pop	{r4, r5}
  400af2:	4770      	bx	lr

00400af4 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400af4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400af6:	6844      	ldr	r4, [r0, #4]
  400af8:	f014 0f01 	tst.w	r4, #1
  400afc:	d005      	beq.n	400b0a <rtc_set_time+0x16>
		if (ul_hour > 12) {
  400afe:	290c      	cmp	r1, #12
  400b00:	d93d      	bls.n	400b7e <rtc_set_time+0x8a>
			ul_hour -= 12;
  400b02:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400b04:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400b08:	e000      	b.n	400b0c <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400b0a:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400b0c:	4c1d      	ldr	r4, [pc, #116]	; (400b84 <rtc_set_time+0x90>)
  400b0e:	fba4 5603 	umull	r5, r6, r4, r3
  400b12:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400b14:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400b18:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400b1c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400b20:	fba4 6502 	umull	r6, r5, r4, r2
  400b24:	08ed      	lsrs	r5, r5, #3
  400b26:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400b2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400b2e:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400b32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400b36:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400b38:	fba4 4201 	umull	r4, r2, r4, r1
  400b3c:	08d2      	lsrs	r2, r2, #3
  400b3e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400b42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400b46:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400b4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400b4e:	6983      	ldr	r3, [r0, #24]
  400b50:	f013 0f04 	tst.w	r3, #4
  400b54:	d0fb      	beq.n	400b4e <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400b56:	6803      	ldr	r3, [r0, #0]
  400b58:	f043 0301 	orr.w	r3, r3, #1
  400b5c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400b5e:	6983      	ldr	r3, [r0, #24]
  400b60:	f013 0f01 	tst.w	r3, #1
  400b64:	d0fb      	beq.n	400b5e <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400b66:	2301      	movs	r3, #1
  400b68:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400b6a:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400b6c:	6803      	ldr	r3, [r0, #0]
  400b6e:	f023 0301 	bic.w	r3, r3, #1
  400b72:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400b74:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400b76:	f000 0001 	and.w	r0, r0, #1
  400b7a:	bcf0      	pop	{r4, r5, r6, r7}
  400b7c:	4770      	bx	lr
	uint32_t ul_time = 0;
  400b7e:	2700      	movs	r7, #0
  400b80:	e7c4      	b.n	400b0c <rtc_set_time+0x18>
  400b82:	bf00      	nop
  400b84:	cccccccd 	.word	0xcccccccd

00400b88 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400b88:	b4f0      	push	{r4, r5, r6, r7}
  400b8a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400b8c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400b8e:	68c4      	ldr	r4, [r0, #12]
  400b90:	42a5      	cmp	r5, r4
  400b92:	d003      	beq.n	400b9c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400b94:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400b96:	68c4      	ldr	r4, [r0, #12]
  400b98:	42ac      	cmp	r4, r5
  400b9a:	d1fb      	bne.n	400b94 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400b9c:	b199      	cbz	r1, 400bc6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400b9e:	f3c4 3003 	ubfx	r0, r4, #12, #4
  400ba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400ba6:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400baa:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400bae:	f3c4 1002 	ubfx	r0, r4, #4, #3
  400bb2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400bb6:	f004 000f 	and.w	r0, r4, #15
  400bba:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400bbe:	2564      	movs	r5, #100	; 0x64
  400bc0:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400bc4:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400bc6:	b142      	cbz	r2, 400bda <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400bc8:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400bcc:	0081      	lsls	r1, r0, #2
  400bce:	4408      	add	r0, r1
  400bd0:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400bd4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400bd8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400bda:	b143      	cbz	r3, 400bee <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400bdc:	f3c4 7201 	ubfx	r2, r4, #28, #2
  400be0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400be4:	f3c4 6103 	ubfx	r1, r4, #24, #4
  400be8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400bec:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400bee:	b116      	cbz	r6, 400bf6 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400bf0:	f3c4 5442 	ubfx	r4, r4, #21, #3
  400bf4:	6034      	str	r4, [r6, #0]
	}
}
  400bf6:	bcf0      	pop	{r4, r5, r6, r7}
  400bf8:	4770      	bx	lr
	...

00400bfc <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400bfc:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400bfe:	4d2a      	ldr	r5, [pc, #168]	; (400ca8 <rtc_set_date+0xac>)
  400c00:	fba5 4603 	umull	r4, r6, r5, r3
  400c04:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400c06:	9c03      	ldr	r4, [sp, #12]
  400c08:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c0a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400c0e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400c12:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c16:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400c1a:	fba5 6402 	umull	r6, r4, r5, r2
  400c1e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c20:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400c24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400c28:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c2c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400c30:	4b1e      	ldr	r3, [pc, #120]	; (400cac <rtc_set_date+0xb0>)
  400c32:	fba3 4301 	umull	r4, r3, r3, r1
  400c36:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c38:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400c3c:	4b1c      	ldr	r3, [pc, #112]	; (400cb0 <rtc_set_date+0xb4>)
  400c3e:	fba3 4301 	umull	r4, r3, r3, r1
  400c42:	095b      	lsrs	r3, r3, #5
  400c44:	fba5 6403 	umull	r6, r4, r5, r3
  400c48:	08e4      	lsrs	r4, r4, #3
  400c4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400c4e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c52:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400c54:	fba5 4301 	umull	r4, r3, r5, r1
  400c58:	08db      	lsrs	r3, r3, #3
  400c5a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400c5e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400c66:	fba5 1503 	umull	r1, r5, r5, r3
  400c6a:	08ed      	lsrs	r5, r5, #3
  400c6c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400c70:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400c74:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400c78:	6983      	ldr	r3, [r0, #24]
  400c7a:	f013 0f04 	tst.w	r3, #4
  400c7e:	d0fb      	beq.n	400c78 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400c80:	6803      	ldr	r3, [r0, #0]
  400c82:	f043 0302 	orr.w	r3, r3, #2
  400c86:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400c88:	6983      	ldr	r3, [r0, #24]
  400c8a:	f013 0f01 	tst.w	r3, #1
  400c8e:	d0fb      	beq.n	400c88 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400c90:	2301      	movs	r3, #1
  400c92:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400c94:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400c96:	6803      	ldr	r3, [r0, #0]
  400c98:	f023 0302 	bic.w	r3, r3, #2
  400c9c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400c9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400ca0:	f000 0002 	and.w	r0, r0, #2
  400ca4:	bc70      	pop	{r4, r5, r6}
  400ca6:	4770      	bx	lr
  400ca8:	cccccccd 	.word	0xcccccccd
  400cac:	10624dd3 	.word	0x10624dd3
  400cb0:	51eb851f 	.word	0x51eb851f

00400cb4 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  400cb4:	6940      	ldr	r0, [r0, #20]
}
  400cb6:	4770      	bx	lr

00400cb8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cb8:	6943      	ldr	r3, [r0, #20]
  400cba:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cbe:	bf1d      	ittte	ne
  400cc0:	6983      	ldrne	r3, [r0, #24]
  400cc2:	700b      	strbne	r3, [r1, #0]
	return 0;
  400cc4:	2000      	movne	r0, #0
		return 1;
  400cc6:	2001      	moveq	r0, #1
}
  400cc8:	4770      	bx	lr

00400cca <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cce:	6043      	str	r3, [r0, #4]
  400cd0:	4770      	bx	lr

00400cd2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400cd2:	e7fe      	b.n	400cd2 <Dummy_Handler>

00400cd4 <Reset_Handler>:
{
  400cd4:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400cd6:	4b21      	ldr	r3, [pc, #132]	; (400d5c <Reset_Handler+0x88>)
  400cd8:	4a21      	ldr	r2, [pc, #132]	; (400d60 <Reset_Handler+0x8c>)
  400cda:	429a      	cmp	r2, r3
  400cdc:	d928      	bls.n	400d30 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400cde:	4b21      	ldr	r3, [pc, #132]	; (400d64 <Reset_Handler+0x90>)
  400ce0:	4a1e      	ldr	r2, [pc, #120]	; (400d5c <Reset_Handler+0x88>)
  400ce2:	429a      	cmp	r2, r3
  400ce4:	d20c      	bcs.n	400d00 <Reset_Handler+0x2c>
  400ce6:	3b01      	subs	r3, #1
  400ce8:	1a9b      	subs	r3, r3, r2
  400cea:	f023 0303 	bic.w	r3, r3, #3
  400cee:	3304      	adds	r3, #4
  400cf0:	4413      	add	r3, r2
  400cf2:	491b      	ldr	r1, [pc, #108]	; (400d60 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  400cf4:	f851 0b04 	ldr.w	r0, [r1], #4
  400cf8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400cfc:	429a      	cmp	r2, r3
  400cfe:	d1f9      	bne.n	400cf4 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d00:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  400d02:	4b19      	ldr	r3, [pc, #100]	; (400d68 <Reset_Handler+0x94>)
  400d04:	4a19      	ldr	r2, [pc, #100]	; (400d6c <Reset_Handler+0x98>)
  400d06:	429a      	cmp	r2, r3
  400d08:	d20a      	bcs.n	400d20 <Reset_Handler+0x4c>
  400d0a:	3b01      	subs	r3, #1
  400d0c:	1a9b      	subs	r3, r3, r2
  400d0e:	f023 0303 	bic.w	r3, r3, #3
  400d12:	3304      	adds	r3, #4
  400d14:	4413      	add	r3, r2
		*pDest++ = 0;
  400d16:	2100      	movs	r1, #0
  400d18:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400d1c:	429a      	cmp	r2, r3
  400d1e:	d1fb      	bne.n	400d18 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400d20:	4b13      	ldr	r3, [pc, #76]	; (400d70 <Reset_Handler+0x9c>)
  400d22:	4a14      	ldr	r2, [pc, #80]	; (400d74 <Reset_Handler+0xa0>)
  400d24:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400d26:	4b14      	ldr	r3, [pc, #80]	; (400d78 <Reset_Handler+0xa4>)
  400d28:	4798      	blx	r3
	main();
  400d2a:	4b14      	ldr	r3, [pc, #80]	; (400d7c <Reset_Handler+0xa8>)
  400d2c:	4798      	blx	r3
  400d2e:	e7fe      	b.n	400d2e <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400d30:	4b0a      	ldr	r3, [pc, #40]	; (400d5c <Reset_Handler+0x88>)
  400d32:	4a0b      	ldr	r2, [pc, #44]	; (400d60 <Reset_Handler+0x8c>)
  400d34:	429a      	cmp	r2, r3
  400d36:	d2e3      	bcs.n	400d00 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d38:	4b0a      	ldr	r3, [pc, #40]	; (400d64 <Reset_Handler+0x90>)
  400d3a:	4808      	ldr	r0, [pc, #32]	; (400d5c <Reset_Handler+0x88>)
  400d3c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d3e:	4611      	mov	r1, r2
  400d40:	3a04      	subs	r2, #4
  400d42:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400d44:	2800      	cmp	r0, #0
  400d46:	d0db      	beq.n	400d00 <Reset_Handler+0x2c>
  400d48:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400d4c:	f852 0904 	ldr.w	r0, [r2], #-4
  400d50:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400d54:	42ca      	cmn	r2, r1
  400d56:	d1f9      	bne.n	400d4c <Reset_Handler+0x78>
  400d58:	e7d2      	b.n	400d00 <Reset_Handler+0x2c>
  400d5a:	bf00      	nop
  400d5c:	20000000 	.word	0x20000000
  400d60:	00401444 	.word	0x00401444
  400d64:	2000043c 	.word	0x2000043c
  400d68:	20000510 	.word	0x20000510
  400d6c:	2000043c 	.word	0x2000043c
  400d70:	e000ed00 	.word	0xe000ed00
  400d74:	00400000 	.word	0x00400000
  400d78:	0040128d 	.word	0x0040128d
  400d7c:	00400f25 	.word	0x00400f25

00400d80 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400d80:	4b3c      	ldr	r3, [pc, #240]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d84:	f003 0303 	and.w	r3, r3, #3
  400d88:	2b03      	cmp	r3, #3
  400d8a:	d80e      	bhi.n	400daa <SystemCoreClockUpdate+0x2a>
  400d8c:	e8df f003 	tbb	[pc, r3]
  400d90:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400d94:	4b38      	ldr	r3, [pc, #224]	; (400e78 <SystemCoreClockUpdate+0xf8>)
  400d96:	695b      	ldr	r3, [r3, #20]
  400d98:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400d9c:	bf14      	ite	ne
  400d9e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400da2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400da6:	4b35      	ldr	r3, [pc, #212]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400da8:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400daa:	4b32      	ldr	r3, [pc, #200]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400db2:	2b70      	cmp	r3, #112	; 0x70
  400db4:	d055      	beq.n	400e62 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400db6:	4b2f      	ldr	r3, [pc, #188]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400dba:	4930      	ldr	r1, [pc, #192]	; (400e7c <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400dbc:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400dc0:	680b      	ldr	r3, [r1, #0]
  400dc2:	40d3      	lsrs	r3, r2
  400dc4:	600b      	str	r3, [r1, #0]
  400dc6:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400dc8:	4b2a      	ldr	r3, [pc, #168]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400dca:	6a1b      	ldr	r3, [r3, #32]
  400dcc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400dd0:	d003      	beq.n	400dda <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400dd2:	4a2b      	ldr	r2, [pc, #172]	; (400e80 <SystemCoreClockUpdate+0x100>)
  400dd4:	4b29      	ldr	r3, [pc, #164]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400dd6:	601a      	str	r2, [r3, #0]
  400dd8:	e7e7      	b.n	400daa <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dda:	4a2a      	ldr	r2, [pc, #168]	; (400e84 <SystemCoreClockUpdate+0x104>)
  400ddc:	4b27      	ldr	r3, [pc, #156]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400dde:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400de0:	4b24      	ldr	r3, [pc, #144]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400de2:	6a1b      	ldr	r3, [r3, #32]
  400de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400de8:	2b10      	cmp	r3, #16
  400dea:	d005      	beq.n	400df8 <SystemCoreClockUpdate+0x78>
  400dec:	2b20      	cmp	r3, #32
  400dee:	d1dc      	bne.n	400daa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400df0:	4a23      	ldr	r2, [pc, #140]	; (400e80 <SystemCoreClockUpdate+0x100>)
  400df2:	4b22      	ldr	r3, [pc, #136]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400df4:	601a      	str	r2, [r3, #0]
			break;
  400df6:	e7d8      	b.n	400daa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400df8:	4a23      	ldr	r2, [pc, #140]	; (400e88 <SystemCoreClockUpdate+0x108>)
  400dfa:	4b20      	ldr	r3, [pc, #128]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400dfc:	601a      	str	r2, [r3, #0]
			break;
  400dfe:	e7d4      	b.n	400daa <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e00:	4b1c      	ldr	r3, [pc, #112]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400e02:	6a1b      	ldr	r3, [r3, #32]
  400e04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e08:	d018      	beq.n	400e3c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e0a:	4a1d      	ldr	r2, [pc, #116]	; (400e80 <SystemCoreClockUpdate+0x100>)
  400e0c:	4b1b      	ldr	r3, [pc, #108]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400e0e:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e10:	4b18      	ldr	r3, [pc, #96]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e14:	f003 0303 	and.w	r3, r3, #3
  400e18:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400e1a:	4a16      	ldr	r2, [pc, #88]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400e1c:	bf07      	ittee	eq
  400e1e:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400e20:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e22:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e24:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400e26:	4815      	ldr	r0, [pc, #84]	; (400e7c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400e28:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e2c:	6803      	ldr	r3, [r0, #0]
  400e2e:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400e32:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e34:	fbb3 f3f2 	udiv	r3, r3, r2
  400e38:	6003      	str	r3, [r0, #0]
  400e3a:	e7b6      	b.n	400daa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e3c:	4a11      	ldr	r2, [pc, #68]	; (400e84 <SystemCoreClockUpdate+0x104>)
  400e3e:	4b0f      	ldr	r3, [pc, #60]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400e40:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e42:	4b0c      	ldr	r3, [pc, #48]	; (400e74 <SystemCoreClockUpdate+0xf4>)
  400e44:	6a1b      	ldr	r3, [r3, #32]
  400e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e4a:	2b10      	cmp	r3, #16
  400e4c:	d005      	beq.n	400e5a <SystemCoreClockUpdate+0xda>
  400e4e:	2b20      	cmp	r3, #32
  400e50:	d1de      	bne.n	400e10 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e52:	4a0b      	ldr	r2, [pc, #44]	; (400e80 <SystemCoreClockUpdate+0x100>)
  400e54:	4b09      	ldr	r3, [pc, #36]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400e56:	601a      	str	r2, [r3, #0]
					break;
  400e58:	e7da      	b.n	400e10 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e5a:	4a0b      	ldr	r2, [pc, #44]	; (400e88 <SystemCoreClockUpdate+0x108>)
  400e5c:	4b07      	ldr	r3, [pc, #28]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400e5e:	601a      	str	r2, [r3, #0]
					break;
  400e60:	e7d6      	b.n	400e10 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400e62:	4a06      	ldr	r2, [pc, #24]	; (400e7c <SystemCoreClockUpdate+0xfc>)
  400e64:	6813      	ldr	r3, [r2, #0]
  400e66:	4909      	ldr	r1, [pc, #36]	; (400e8c <SystemCoreClockUpdate+0x10c>)
  400e68:	fba1 1303 	umull	r1, r3, r1, r3
  400e6c:	085b      	lsrs	r3, r3, #1
  400e6e:	6013      	str	r3, [r2, #0]
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop
  400e74:	400e0400 	.word	0x400e0400
  400e78:	400e1410 	.word	0x400e1410
  400e7c:	2000000c 	.word	0x2000000c
  400e80:	00b71b00 	.word	0x00b71b00
  400e84:	003d0900 	.word	0x003d0900
  400e88:	007a1200 	.word	0x007a1200
  400e8c:	aaaaaaab 	.word	0xaaaaaaab

00400e90 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400e90:	4b1a      	ldr	r3, [pc, #104]	; (400efc <system_init_flash+0x6c>)
  400e92:	4298      	cmp	r0, r3
  400e94:	d914      	bls.n	400ec0 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400e96:	4b1a      	ldr	r3, [pc, #104]	; (400f00 <system_init_flash+0x70>)
  400e98:	4298      	cmp	r0, r3
  400e9a:	d919      	bls.n	400ed0 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400e9c:	4b19      	ldr	r3, [pc, #100]	; (400f04 <system_init_flash+0x74>)
  400e9e:	4298      	cmp	r0, r3
  400ea0:	d91d      	bls.n	400ede <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400ea2:	4b19      	ldr	r3, [pc, #100]	; (400f08 <system_init_flash+0x78>)
  400ea4:	4298      	cmp	r0, r3
  400ea6:	d921      	bls.n	400eec <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400ea8:	4b18      	ldr	r3, [pc, #96]	; (400f0c <system_init_flash+0x7c>)
  400eaa:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400eac:	bf94      	ite	ls
  400eae:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400eb2:	4b17      	ldrhi	r3, [pc, #92]	; (400f10 <system_init_flash+0x80>)
  400eb4:	4a17      	ldr	r2, [pc, #92]	; (400f14 <system_init_flash+0x84>)
  400eb6:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400eb8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ebc:	6013      	str	r3, [r2, #0]
  400ebe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ec0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400ec4:	4a13      	ldr	r2, [pc, #76]	; (400f14 <system_init_flash+0x84>)
  400ec6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ec8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ecc:	6013      	str	r3, [r2, #0]
  400ece:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ed0:	4b11      	ldr	r3, [pc, #68]	; (400f18 <system_init_flash+0x88>)
  400ed2:	4a10      	ldr	r2, [pc, #64]	; (400f14 <system_init_flash+0x84>)
  400ed4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ed6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400eda:	6013      	str	r3, [r2, #0]
  400edc:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ede:	4b0f      	ldr	r3, [pc, #60]	; (400f1c <system_init_flash+0x8c>)
  400ee0:	4a0c      	ldr	r2, [pc, #48]	; (400f14 <system_init_flash+0x84>)
  400ee2:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ee4:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ee8:	6013      	str	r3, [r2, #0]
  400eea:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400eec:	4b0c      	ldr	r3, [pc, #48]	; (400f20 <system_init_flash+0x90>)
  400eee:	4a09      	ldr	r2, [pc, #36]	; (400f14 <system_init_flash+0x84>)
  400ef0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ef2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ef6:	6013      	str	r3, [r2, #0]
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop
  400efc:	01312cff 	.word	0x01312cff
  400f00:	026259ff 	.word	0x026259ff
  400f04:	039386ff 	.word	0x039386ff
  400f08:	04c4b3ff 	.word	0x04c4b3ff
  400f0c:	05f5e0ff 	.word	0x05f5e0ff
  400f10:	04000500 	.word	0x04000500
  400f14:	400e0a00 	.word	0x400e0a00
  400f18:	04000100 	.word	0x04000100
  400f1c:	04000200 	.word	0x04000200
  400f20:	04000300 	.word	0x04000300

00400f24 <main>:
#include "MiniOS/hal/hal.h"

tTime time;

int main(void)
{
  400f24:	b508      	push	{r3, lr}
	system_init();
  400f26:	4b10      	ldr	r3, [pc, #64]	; (400f68 <main+0x44>)
  400f28:	4798      	blx	r3
	
	time.seconds = 0;
  400f2a:	4810      	ldr	r0, [pc, #64]	; (400f6c <main+0x48>)
  400f2c:	2300      	movs	r3, #0
  400f2e:	6003      	str	r3, [r0, #0]
	time.minutes = 30;
  400f30:	231e      	movs	r3, #30
  400f32:	6043      	str	r3, [r0, #4]
	time.hours = 20;
  400f34:	2314      	movs	r3, #20
  400f36:	6083      	str	r3, [r0, #8]
	time.day = 27;
  400f38:	231b      	movs	r3, #27
  400f3a:	60c3      	str	r3, [r0, #12]
	time.month = 11;
  400f3c:	230b      	movs	r3, #11
  400f3e:	6103      	str	r3, [r0, #16]
	time.year = 2017;
  400f40:	f240 73e1 	movw	r3, #2017	; 0x7e1
  400f44:	6143      	str	r3, [r0, #20]

	hal_clock_write(&time);
  400f46:	4b0a      	ldr	r3, [pc, #40]	; (400f70 <main+0x4c>)
  400f48:	4798      	blx	r3

	while(1){
		hal_clock_read(&time);
  400f4a:	4c08      	ldr	r4, [pc, #32]	; (400f6c <main+0x48>)
  400f4c:	4e09      	ldr	r6, [pc, #36]	; (400f74 <main+0x50>)
		
		if( time.seconds % 2 == 0 )
			hal_led_write( Led2, LedOn );
		else
			hal_led_write( Led2, LedOff );
  400f4e:	4d0a      	ldr	r5, [pc, #40]	; (400f78 <main+0x54>)
		hal_clock_read(&time);
  400f50:	4620      	mov	r0, r4
  400f52:	47b0      	blx	r6
		if( time.seconds % 2 == 0 )
  400f54:	6823      	ldr	r3, [r4, #0]
  400f56:	f013 0f01 	tst.w	r3, #1
			hal_led_write( Led2, LedOn );
  400f5a:	bf0c      	ite	eq
  400f5c:	2101      	moveq	r1, #1
			hal_led_write( Led2, LedOff );
  400f5e:	2100      	movne	r1, #0
  400f60:	2002      	movs	r0, #2
  400f62:	47a8      	blx	r5
  400f64:	e7f4      	b.n	400f50 <main+0x2c>
  400f66:	bf00      	nop
  400f68:	004003e9 	.word	0x004003e9
  400f6c:	200004d4 	.word	0x200004d4
  400f70:	00400265 	.word	0x00400265
  400f74:	00400299 	.word	0x00400299
  400f78:	004001e9 	.word	0x004001e9

00400f7c <__aeabi_uldivmod>:
  400f7c:	b953      	cbnz	r3, 400f94 <__aeabi_uldivmod+0x18>
  400f7e:	b94a      	cbnz	r2, 400f94 <__aeabi_uldivmod+0x18>
  400f80:	2900      	cmp	r1, #0
  400f82:	bf08      	it	eq
  400f84:	2800      	cmpeq	r0, #0
  400f86:	bf1c      	itt	ne
  400f88:	f04f 31ff 	movne.w	r1, #4294967295
  400f8c:	f04f 30ff 	movne.w	r0, #4294967295
  400f90:	f000 b97a 	b.w	401288 <__aeabi_idiv0>
  400f94:	f1ad 0c08 	sub.w	ip, sp, #8
  400f98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  400f9c:	f000 f806 	bl	400fac <__udivmoddi4>
  400fa0:	f8dd e004 	ldr.w	lr, [sp, #4]
  400fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400fa8:	b004      	add	sp, #16
  400faa:	4770      	bx	lr

00400fac <__udivmoddi4>:
  400fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400fb0:	468c      	mov	ip, r1
  400fb2:	460d      	mov	r5, r1
  400fb4:	4604      	mov	r4, r0
  400fb6:	9e08      	ldr	r6, [sp, #32]
  400fb8:	2b00      	cmp	r3, #0
  400fba:	d151      	bne.n	401060 <__udivmoddi4+0xb4>
  400fbc:	428a      	cmp	r2, r1
  400fbe:	4617      	mov	r7, r2
  400fc0:	d96d      	bls.n	40109e <__udivmoddi4+0xf2>
  400fc2:	fab2 fe82 	clz	lr, r2
  400fc6:	f1be 0f00 	cmp.w	lr, #0
  400fca:	d00b      	beq.n	400fe4 <__udivmoddi4+0x38>
  400fcc:	f1ce 0c20 	rsb	ip, lr, #32
  400fd0:	fa01 f50e 	lsl.w	r5, r1, lr
  400fd4:	fa20 fc0c 	lsr.w	ip, r0, ip
  400fd8:	fa02 f70e 	lsl.w	r7, r2, lr
  400fdc:	ea4c 0c05 	orr.w	ip, ip, r5
  400fe0:	fa00 f40e 	lsl.w	r4, r0, lr
  400fe4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  400fe8:	0c25      	lsrs	r5, r4, #16
  400fea:	fbbc f8fa 	udiv	r8, ip, sl
  400fee:	fa1f f987 	uxth.w	r9, r7
  400ff2:	fb0a cc18 	mls	ip, sl, r8, ip
  400ff6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  400ffa:	fb08 f309 	mul.w	r3, r8, r9
  400ffe:	42ab      	cmp	r3, r5
  401000:	d90a      	bls.n	401018 <__udivmoddi4+0x6c>
  401002:	19ed      	adds	r5, r5, r7
  401004:	f108 32ff 	add.w	r2, r8, #4294967295
  401008:	f080 8123 	bcs.w	401252 <__udivmoddi4+0x2a6>
  40100c:	42ab      	cmp	r3, r5
  40100e:	f240 8120 	bls.w	401252 <__udivmoddi4+0x2a6>
  401012:	f1a8 0802 	sub.w	r8, r8, #2
  401016:	443d      	add	r5, r7
  401018:	1aed      	subs	r5, r5, r3
  40101a:	b2a4      	uxth	r4, r4
  40101c:	fbb5 f0fa 	udiv	r0, r5, sl
  401020:	fb0a 5510 	mls	r5, sl, r0, r5
  401024:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401028:	fb00 f909 	mul.w	r9, r0, r9
  40102c:	45a1      	cmp	r9, r4
  40102e:	d909      	bls.n	401044 <__udivmoddi4+0x98>
  401030:	19e4      	adds	r4, r4, r7
  401032:	f100 33ff 	add.w	r3, r0, #4294967295
  401036:	f080 810a 	bcs.w	40124e <__udivmoddi4+0x2a2>
  40103a:	45a1      	cmp	r9, r4
  40103c:	f240 8107 	bls.w	40124e <__udivmoddi4+0x2a2>
  401040:	3802      	subs	r0, #2
  401042:	443c      	add	r4, r7
  401044:	eba4 0409 	sub.w	r4, r4, r9
  401048:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40104c:	2100      	movs	r1, #0
  40104e:	2e00      	cmp	r6, #0
  401050:	d061      	beq.n	401116 <__udivmoddi4+0x16a>
  401052:	fa24 f40e 	lsr.w	r4, r4, lr
  401056:	2300      	movs	r3, #0
  401058:	6034      	str	r4, [r6, #0]
  40105a:	6073      	str	r3, [r6, #4]
  40105c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401060:	428b      	cmp	r3, r1
  401062:	d907      	bls.n	401074 <__udivmoddi4+0xc8>
  401064:	2e00      	cmp	r6, #0
  401066:	d054      	beq.n	401112 <__udivmoddi4+0x166>
  401068:	2100      	movs	r1, #0
  40106a:	e886 0021 	stmia.w	r6, {r0, r5}
  40106e:	4608      	mov	r0, r1
  401070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401074:	fab3 f183 	clz	r1, r3
  401078:	2900      	cmp	r1, #0
  40107a:	f040 808e 	bne.w	40119a <__udivmoddi4+0x1ee>
  40107e:	42ab      	cmp	r3, r5
  401080:	d302      	bcc.n	401088 <__udivmoddi4+0xdc>
  401082:	4282      	cmp	r2, r0
  401084:	f200 80fa 	bhi.w	40127c <__udivmoddi4+0x2d0>
  401088:	1a84      	subs	r4, r0, r2
  40108a:	eb65 0503 	sbc.w	r5, r5, r3
  40108e:	2001      	movs	r0, #1
  401090:	46ac      	mov	ip, r5
  401092:	2e00      	cmp	r6, #0
  401094:	d03f      	beq.n	401116 <__udivmoddi4+0x16a>
  401096:	e886 1010 	stmia.w	r6, {r4, ip}
  40109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40109e:	b912      	cbnz	r2, 4010a6 <__udivmoddi4+0xfa>
  4010a0:	2701      	movs	r7, #1
  4010a2:	fbb7 f7f2 	udiv	r7, r7, r2
  4010a6:	fab7 fe87 	clz	lr, r7
  4010aa:	f1be 0f00 	cmp.w	lr, #0
  4010ae:	d134      	bne.n	40111a <__udivmoddi4+0x16e>
  4010b0:	1beb      	subs	r3, r5, r7
  4010b2:	0c3a      	lsrs	r2, r7, #16
  4010b4:	fa1f fc87 	uxth.w	ip, r7
  4010b8:	2101      	movs	r1, #1
  4010ba:	fbb3 f8f2 	udiv	r8, r3, r2
  4010be:	0c25      	lsrs	r5, r4, #16
  4010c0:	fb02 3318 	mls	r3, r2, r8, r3
  4010c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4010c8:	fb0c f308 	mul.w	r3, ip, r8
  4010cc:	42ab      	cmp	r3, r5
  4010ce:	d907      	bls.n	4010e0 <__udivmoddi4+0x134>
  4010d0:	19ed      	adds	r5, r5, r7
  4010d2:	f108 30ff 	add.w	r0, r8, #4294967295
  4010d6:	d202      	bcs.n	4010de <__udivmoddi4+0x132>
  4010d8:	42ab      	cmp	r3, r5
  4010da:	f200 80d1 	bhi.w	401280 <__udivmoddi4+0x2d4>
  4010de:	4680      	mov	r8, r0
  4010e0:	1aed      	subs	r5, r5, r3
  4010e2:	b2a3      	uxth	r3, r4
  4010e4:	fbb5 f0f2 	udiv	r0, r5, r2
  4010e8:	fb02 5510 	mls	r5, r2, r0, r5
  4010ec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4010f0:	fb0c fc00 	mul.w	ip, ip, r0
  4010f4:	45a4      	cmp	ip, r4
  4010f6:	d907      	bls.n	401108 <__udivmoddi4+0x15c>
  4010f8:	19e4      	adds	r4, r4, r7
  4010fa:	f100 33ff 	add.w	r3, r0, #4294967295
  4010fe:	d202      	bcs.n	401106 <__udivmoddi4+0x15a>
  401100:	45a4      	cmp	ip, r4
  401102:	f200 80b8 	bhi.w	401276 <__udivmoddi4+0x2ca>
  401106:	4618      	mov	r0, r3
  401108:	eba4 040c 	sub.w	r4, r4, ip
  40110c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401110:	e79d      	b.n	40104e <__udivmoddi4+0xa2>
  401112:	4631      	mov	r1, r6
  401114:	4630      	mov	r0, r6
  401116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40111a:	f1ce 0420 	rsb	r4, lr, #32
  40111e:	fa05 f30e 	lsl.w	r3, r5, lr
  401122:	fa07 f70e 	lsl.w	r7, r7, lr
  401126:	fa20 f804 	lsr.w	r8, r0, r4
  40112a:	0c3a      	lsrs	r2, r7, #16
  40112c:	fa25 f404 	lsr.w	r4, r5, r4
  401130:	ea48 0803 	orr.w	r8, r8, r3
  401134:	fbb4 f1f2 	udiv	r1, r4, r2
  401138:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40113c:	fb02 4411 	mls	r4, r2, r1, r4
  401140:	fa1f fc87 	uxth.w	ip, r7
  401144:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401148:	fb01 f30c 	mul.w	r3, r1, ip
  40114c:	42ab      	cmp	r3, r5
  40114e:	fa00 f40e 	lsl.w	r4, r0, lr
  401152:	d909      	bls.n	401168 <__udivmoddi4+0x1bc>
  401154:	19ed      	adds	r5, r5, r7
  401156:	f101 30ff 	add.w	r0, r1, #4294967295
  40115a:	f080 808a 	bcs.w	401272 <__udivmoddi4+0x2c6>
  40115e:	42ab      	cmp	r3, r5
  401160:	f240 8087 	bls.w	401272 <__udivmoddi4+0x2c6>
  401164:	3902      	subs	r1, #2
  401166:	443d      	add	r5, r7
  401168:	1aeb      	subs	r3, r5, r3
  40116a:	fa1f f588 	uxth.w	r5, r8
  40116e:	fbb3 f0f2 	udiv	r0, r3, r2
  401172:	fb02 3310 	mls	r3, r2, r0, r3
  401176:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40117a:	fb00 f30c 	mul.w	r3, r0, ip
  40117e:	42ab      	cmp	r3, r5
  401180:	d907      	bls.n	401192 <__udivmoddi4+0x1e6>
  401182:	19ed      	adds	r5, r5, r7
  401184:	f100 38ff 	add.w	r8, r0, #4294967295
  401188:	d26f      	bcs.n	40126a <__udivmoddi4+0x2be>
  40118a:	42ab      	cmp	r3, r5
  40118c:	d96d      	bls.n	40126a <__udivmoddi4+0x2be>
  40118e:	3802      	subs	r0, #2
  401190:	443d      	add	r5, r7
  401192:	1aeb      	subs	r3, r5, r3
  401194:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401198:	e78f      	b.n	4010ba <__udivmoddi4+0x10e>
  40119a:	f1c1 0720 	rsb	r7, r1, #32
  40119e:	fa22 f807 	lsr.w	r8, r2, r7
  4011a2:	408b      	lsls	r3, r1
  4011a4:	fa05 f401 	lsl.w	r4, r5, r1
  4011a8:	ea48 0303 	orr.w	r3, r8, r3
  4011ac:	fa20 fe07 	lsr.w	lr, r0, r7
  4011b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4011b4:	40fd      	lsrs	r5, r7
  4011b6:	ea4e 0e04 	orr.w	lr, lr, r4
  4011ba:	fbb5 f9fc 	udiv	r9, r5, ip
  4011be:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4011c2:	fb0c 5519 	mls	r5, ip, r9, r5
  4011c6:	fa1f f883 	uxth.w	r8, r3
  4011ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4011ce:	fb09 f408 	mul.w	r4, r9, r8
  4011d2:	42ac      	cmp	r4, r5
  4011d4:	fa02 f201 	lsl.w	r2, r2, r1
  4011d8:	fa00 fa01 	lsl.w	sl, r0, r1
  4011dc:	d908      	bls.n	4011f0 <__udivmoddi4+0x244>
  4011de:	18ed      	adds	r5, r5, r3
  4011e0:	f109 30ff 	add.w	r0, r9, #4294967295
  4011e4:	d243      	bcs.n	40126e <__udivmoddi4+0x2c2>
  4011e6:	42ac      	cmp	r4, r5
  4011e8:	d941      	bls.n	40126e <__udivmoddi4+0x2c2>
  4011ea:	f1a9 0902 	sub.w	r9, r9, #2
  4011ee:	441d      	add	r5, r3
  4011f0:	1b2d      	subs	r5, r5, r4
  4011f2:	fa1f fe8e 	uxth.w	lr, lr
  4011f6:	fbb5 f0fc 	udiv	r0, r5, ip
  4011fa:	fb0c 5510 	mls	r5, ip, r0, r5
  4011fe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401202:	fb00 f808 	mul.w	r8, r0, r8
  401206:	45a0      	cmp	r8, r4
  401208:	d907      	bls.n	40121a <__udivmoddi4+0x26e>
  40120a:	18e4      	adds	r4, r4, r3
  40120c:	f100 35ff 	add.w	r5, r0, #4294967295
  401210:	d229      	bcs.n	401266 <__udivmoddi4+0x2ba>
  401212:	45a0      	cmp	r8, r4
  401214:	d927      	bls.n	401266 <__udivmoddi4+0x2ba>
  401216:	3802      	subs	r0, #2
  401218:	441c      	add	r4, r3
  40121a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40121e:	eba4 0408 	sub.w	r4, r4, r8
  401222:	fba0 8902 	umull	r8, r9, r0, r2
  401226:	454c      	cmp	r4, r9
  401228:	46c6      	mov	lr, r8
  40122a:	464d      	mov	r5, r9
  40122c:	d315      	bcc.n	40125a <__udivmoddi4+0x2ae>
  40122e:	d012      	beq.n	401256 <__udivmoddi4+0x2aa>
  401230:	b156      	cbz	r6, 401248 <__udivmoddi4+0x29c>
  401232:	ebba 030e 	subs.w	r3, sl, lr
  401236:	eb64 0405 	sbc.w	r4, r4, r5
  40123a:	fa04 f707 	lsl.w	r7, r4, r7
  40123e:	40cb      	lsrs	r3, r1
  401240:	431f      	orrs	r7, r3
  401242:	40cc      	lsrs	r4, r1
  401244:	6037      	str	r7, [r6, #0]
  401246:	6074      	str	r4, [r6, #4]
  401248:	2100      	movs	r1, #0
  40124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40124e:	4618      	mov	r0, r3
  401250:	e6f8      	b.n	401044 <__udivmoddi4+0x98>
  401252:	4690      	mov	r8, r2
  401254:	e6e0      	b.n	401018 <__udivmoddi4+0x6c>
  401256:	45c2      	cmp	sl, r8
  401258:	d2ea      	bcs.n	401230 <__udivmoddi4+0x284>
  40125a:	ebb8 0e02 	subs.w	lr, r8, r2
  40125e:	eb69 0503 	sbc.w	r5, r9, r3
  401262:	3801      	subs	r0, #1
  401264:	e7e4      	b.n	401230 <__udivmoddi4+0x284>
  401266:	4628      	mov	r0, r5
  401268:	e7d7      	b.n	40121a <__udivmoddi4+0x26e>
  40126a:	4640      	mov	r0, r8
  40126c:	e791      	b.n	401192 <__udivmoddi4+0x1e6>
  40126e:	4681      	mov	r9, r0
  401270:	e7be      	b.n	4011f0 <__udivmoddi4+0x244>
  401272:	4601      	mov	r1, r0
  401274:	e778      	b.n	401168 <__udivmoddi4+0x1bc>
  401276:	3802      	subs	r0, #2
  401278:	443c      	add	r4, r7
  40127a:	e745      	b.n	401108 <__udivmoddi4+0x15c>
  40127c:	4608      	mov	r0, r1
  40127e:	e708      	b.n	401092 <__udivmoddi4+0xe6>
  401280:	f1a8 0802 	sub.w	r8, r8, #2
  401284:	443d      	add	r5, r7
  401286:	e72b      	b.n	4010e0 <__udivmoddi4+0x134>

00401288 <__aeabi_idiv0>:
  401288:	4770      	bx	lr
  40128a:	bf00      	nop

0040128c <__libc_init_array>:
  40128c:	b570      	push	{r4, r5, r6, lr}
  40128e:	4e0f      	ldr	r6, [pc, #60]	; (4012cc <__libc_init_array+0x40>)
  401290:	4d0f      	ldr	r5, [pc, #60]	; (4012d0 <__libc_init_array+0x44>)
  401292:	1b76      	subs	r6, r6, r5
  401294:	10b6      	asrs	r6, r6, #2
  401296:	bf18      	it	ne
  401298:	2400      	movne	r4, #0
  40129a:	d005      	beq.n	4012a8 <__libc_init_array+0x1c>
  40129c:	3401      	adds	r4, #1
  40129e:	f855 3b04 	ldr.w	r3, [r5], #4
  4012a2:	4798      	blx	r3
  4012a4:	42a6      	cmp	r6, r4
  4012a6:	d1f9      	bne.n	40129c <__libc_init_array+0x10>
  4012a8:	4e0a      	ldr	r6, [pc, #40]	; (4012d4 <__libc_init_array+0x48>)
  4012aa:	4d0b      	ldr	r5, [pc, #44]	; (4012d8 <__libc_init_array+0x4c>)
  4012ac:	1b76      	subs	r6, r6, r5
  4012ae:	f000 f8b3 	bl	401418 <_init>
  4012b2:	10b6      	asrs	r6, r6, #2
  4012b4:	bf18      	it	ne
  4012b6:	2400      	movne	r4, #0
  4012b8:	d006      	beq.n	4012c8 <__libc_init_array+0x3c>
  4012ba:	3401      	adds	r4, #1
  4012bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4012c0:	4798      	blx	r3
  4012c2:	42a6      	cmp	r6, r4
  4012c4:	d1f9      	bne.n	4012ba <__libc_init_array+0x2e>
  4012c6:	bd70      	pop	{r4, r5, r6, pc}
  4012c8:	bd70      	pop	{r4, r5, r6, pc}
  4012ca:	bf00      	nop
  4012cc:	00401424 	.word	0x00401424
  4012d0:	00401424 	.word	0x00401424
  4012d4:	0040142c 	.word	0x0040142c
  4012d8:	00401424 	.word	0x00401424

004012dc <register_fini>:
  4012dc:	4b02      	ldr	r3, [pc, #8]	; (4012e8 <register_fini+0xc>)
  4012de:	b113      	cbz	r3, 4012e6 <register_fini+0xa>
  4012e0:	4802      	ldr	r0, [pc, #8]	; (4012ec <register_fini+0x10>)
  4012e2:	f000 b805 	b.w	4012f0 <atexit>
  4012e6:	4770      	bx	lr
  4012e8:	00000000 	.word	0x00000000
  4012ec:	004012fd 	.word	0x004012fd

004012f0 <atexit>:
  4012f0:	2300      	movs	r3, #0
  4012f2:	4601      	mov	r1, r0
  4012f4:	461a      	mov	r2, r3
  4012f6:	4618      	mov	r0, r3
  4012f8:	f000 b81e 	b.w	401338 <__register_exitproc>

004012fc <__libc_fini_array>:
  4012fc:	b538      	push	{r3, r4, r5, lr}
  4012fe:	4c0a      	ldr	r4, [pc, #40]	; (401328 <__libc_fini_array+0x2c>)
  401300:	4d0a      	ldr	r5, [pc, #40]	; (40132c <__libc_fini_array+0x30>)
  401302:	1b64      	subs	r4, r4, r5
  401304:	10a4      	asrs	r4, r4, #2
  401306:	d00a      	beq.n	40131e <__libc_fini_array+0x22>
  401308:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40130c:	3b01      	subs	r3, #1
  40130e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401312:	3c01      	subs	r4, #1
  401314:	f855 3904 	ldr.w	r3, [r5], #-4
  401318:	4798      	blx	r3
  40131a:	2c00      	cmp	r4, #0
  40131c:	d1f9      	bne.n	401312 <__libc_fini_array+0x16>
  40131e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401322:	f000 b883 	b.w	40142c <_fini>
  401326:	bf00      	nop
  401328:	0040143c 	.word	0x0040143c
  40132c:	00401438 	.word	0x00401438

00401330 <__retarget_lock_acquire_recursive>:
  401330:	4770      	bx	lr
  401332:	bf00      	nop

00401334 <__retarget_lock_release_recursive>:
  401334:	4770      	bx	lr
  401336:	bf00      	nop

00401338 <__register_exitproc>:
  401338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40133c:	4d2c      	ldr	r5, [pc, #176]	; (4013f0 <__register_exitproc+0xb8>)
  40133e:	4606      	mov	r6, r0
  401340:	6828      	ldr	r0, [r5, #0]
  401342:	4698      	mov	r8, r3
  401344:	460f      	mov	r7, r1
  401346:	4691      	mov	r9, r2
  401348:	f7ff fff2 	bl	401330 <__retarget_lock_acquire_recursive>
  40134c:	4b29      	ldr	r3, [pc, #164]	; (4013f4 <__register_exitproc+0xbc>)
  40134e:	681c      	ldr	r4, [r3, #0]
  401350:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401354:	2b00      	cmp	r3, #0
  401356:	d03e      	beq.n	4013d6 <__register_exitproc+0x9e>
  401358:	685a      	ldr	r2, [r3, #4]
  40135a:	2a1f      	cmp	r2, #31
  40135c:	dc1c      	bgt.n	401398 <__register_exitproc+0x60>
  40135e:	f102 0e01 	add.w	lr, r2, #1
  401362:	b176      	cbz	r6, 401382 <__register_exitproc+0x4a>
  401364:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401368:	2401      	movs	r4, #1
  40136a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40136e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401372:	4094      	lsls	r4, r2
  401374:	4320      	orrs	r0, r4
  401376:	2e02      	cmp	r6, #2
  401378:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40137c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401380:	d023      	beq.n	4013ca <__register_exitproc+0x92>
  401382:	3202      	adds	r2, #2
  401384:	f8c3 e004 	str.w	lr, [r3, #4]
  401388:	6828      	ldr	r0, [r5, #0]
  40138a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40138e:	f7ff ffd1 	bl	401334 <__retarget_lock_release_recursive>
  401392:	2000      	movs	r0, #0
  401394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401398:	4b17      	ldr	r3, [pc, #92]	; (4013f8 <__register_exitproc+0xc0>)
  40139a:	b30b      	cbz	r3, 4013e0 <__register_exitproc+0xa8>
  40139c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4013a0:	f3af 8000 	nop.w
  4013a4:	4603      	mov	r3, r0
  4013a6:	b1d8      	cbz	r0, 4013e0 <__register_exitproc+0xa8>
  4013a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4013ac:	6002      	str	r2, [r0, #0]
  4013ae:	2100      	movs	r1, #0
  4013b0:	6041      	str	r1, [r0, #4]
  4013b2:	460a      	mov	r2, r1
  4013b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4013b8:	f04f 0e01 	mov.w	lr, #1
  4013bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4013c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4013c4:	2e00      	cmp	r6, #0
  4013c6:	d0dc      	beq.n	401382 <__register_exitproc+0x4a>
  4013c8:	e7cc      	b.n	401364 <__register_exitproc+0x2c>
  4013ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4013ce:	430c      	orrs	r4, r1
  4013d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4013d4:	e7d5      	b.n	401382 <__register_exitproc+0x4a>
  4013d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4013da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4013de:	e7bb      	b.n	401358 <__register_exitproc+0x20>
  4013e0:	6828      	ldr	r0, [r5, #0]
  4013e2:	f7ff ffa7 	bl	401334 <__retarget_lock_release_recursive>
  4013e6:	f04f 30ff 	mov.w	r0, #4294967295
  4013ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013ee:	bf00      	nop
  4013f0:	20000438 	.word	0x20000438
  4013f4:	00401414 	.word	0x00401414
	...
  401400:	0000000d 	.word	0x0000000d
  401404:	00000000 	.word	0x00000000
  401408:	0000000e 	.word	0x0000000e
  40140c:	00000007 	.word	0x00000007
  401410:	000007c7 	.word	0x000007c7

00401414 <_global_impure_ptr>:
  401414:	20000010                                ... 

00401418 <_init>:
  401418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40141a:	bf00      	nop
  40141c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40141e:	bc08      	pop	{r3}
  401420:	469e      	mov	lr, r3
  401422:	4770      	bx	lr

00401424 <__init_array_start>:
  401424:	004012dd 	.word	0x004012dd

00401428 <__frame_dummy_init_array_entry>:
  401428:	004000f1                                ..@.

0040142c <_fini>:
  40142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40142e:	bf00      	nop
  401430:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401432:	bc08      	pop	{r3}
  401434:	469e      	mov	lr, r3
  401436:	4770      	bx	lr

00401438 <__fini_array_start>:
  401438:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	04ec 2000                                   ... 
